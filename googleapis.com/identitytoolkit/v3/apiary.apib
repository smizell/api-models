FORMAT: 1A

# Google Identity Toolkit API

Help the third party sites to implement federated login.

### Resource /createAuthUri [/createAuthUri]

#### identitytoolkit.relyingparty.createAuthUri [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to get the IDP authentication URL.",
              "properties": {
                "appId": {
                  "type": "string",
                  "description": "The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS."
                },
                "clientId": {
                  "type": "string",
                  "description": "The relying party OAuth client ID."
                },
                "context": {
                  "type": "string",
                  "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback."
                },
                "continueUri": {
                  "type": "string",
                  "description": "The URI to which the IDP redirects the user after the federated login flow."
                },
                "identifier": {
                  "type": "string",
                  "description": "The email or federated ID of the user."
                },
                "oauthConsumerKey": {
                  "type": "string",
                  "description": "The developer's consumer key for OpenId OAuth Extension"
                },
                "oauthScope": {
                  "type": "string",
                  "description": "Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant"
                },
                "openidRealm": {
                  "type": "string",
                  "description": "Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set."
                },
                "otaApp": {
                  "type": "string",
                  "description": "The native app package for OTA installation."
                },
                "providerId": {
                  "type": "string",
                  "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
                }
              }
            }

+ Response 200

### Resource /deleteAccount [/deleteAccount]

#### identitytoolkit.relyingparty.deleteAccount [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to delete account.",
              "properties": {
                "localId": {
                  "type": "string",
                  "description": "The local ID of the user."
                }
              }
            }

+ Response 200

### Resource /downloadAccount [/downloadAccount]

#### identitytoolkit.relyingparty.downloadAccount [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to download user account in batch.",
              "properties": {
                "maxResults": {
                  "type": "integer",
                  "description": "The max number of results to return in the response.",
                  "format": "uint32"
                },
                "nextPageToken": {
                  "type": "string",
                  "description": "The token for the next page. This should be taken from the previous response."
                }
              }
            }

+ Response 200

### Resource /getAccountInfo [/getAccountInfo]

#### identitytoolkit.relyingparty.getAccountInfo [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to get the account information.",
              "properties": {
                "email": {
                  "type": "array",
                  "description": "The list of emails of the users to inquiry.",
                  "items": {
                    "type": "string"
                  }
                },
                "idToken": {
                  "type": "string",
                  "description": "The GITKit token of the authenticated user."
                },
                "localId": {
                  "type": "array",
                  "description": "The list of local ID's of the users to inquiry.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /getOobConfirmationCode [/getOobConfirmationCode]

#### identitytoolkit.relyingparty.getOobConfirmationCode [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request of getting a code for user confirmation (reset password, change email etc.)",
              "properties": {
                "captchaResp": {
                  "type": "string",
                  "description": "The recaptcha response from the user."
                },
                "challenge": {
                  "type": "string",
                  "description": "The recaptcha challenge presented to the user."
                },
                "email": {
                  "type": "string",
                  "description": "The email of the user."
                },
                "idToken": {
                  "type": "string",
                  "description": "The user's Gitkit login token for email change."
                },
                "kind": {
                  "type": "string",
                  "description": "The fixed string \"identitytoolkit#relyingparty\".",
                  "default": "identitytoolkit#relyingparty"
                },
                "newEmail": {
                  "type": "string",
                  "description": "The new email if the code is for email change."
                },
                "requestType": {
                  "type": "string",
                  "description": "The request type."
                },
                "userIp": {
                  "type": "string",
                  "description": "The IP address of the user."
                }
              }
            }

+ Response 200

### Resource /publicKeys [/publicKeys]

#### identitytoolkit.relyingparty.getPublicKeys [GET]

+ Response 200

### Resource /getRecaptchaParam [/getRecaptchaParam]

#### identitytoolkit.relyingparty.getRecaptchaParam [GET]

+ Response 200

### Resource /resetPassword [/resetPassword]

#### identitytoolkit.relyingparty.resetPassword [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to reset the password.",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The email address of the user."
                },
                "newPassword": {
                  "type": "string",
                  "description": "The new password inputted by the user."
                },
                "oldPassword": {
                  "type": "string",
                  "description": "The old password inputted by the user."
                },
                "oobCode": {
                  "type": "string",
                  "description": "The confirmation code."
                }
              }
            }

+ Response 200

### Resource /setAccountInfo [/setAccountInfo]

#### identitytoolkit.relyingparty.setAccountInfo [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to set the account information.",
              "properties": {
                "captchaChallenge": {
                  "type": "string",
                  "description": "The captcha challenge."
                },
                "captchaResponse": {
                  "type": "string",
                  "description": "Response to the captcha."
                },
                "disableUser": {
                  "type": "boolean",
                  "description": "Whether to disable the user."
                },
                "displayName": {
                  "type": "string",
                  "description": "The name of the user."
                },
                "email": {
                  "type": "string",
                  "description": "The email of the user."
                },
                "emailVerified": {
                  "type": "boolean",
                  "description": "Mark the email as verified or not."
                },
                "idToken": {
                  "type": "string",
                  "description": "The GITKit token of the authenticated user."
                },
                "localId": {
                  "type": "string",
                  "description": "The local ID of the user."
                },
                "oobCode": {
                  "type": "string",
                  "description": "The out-of-band code of the change email request."
                },
                "password": {
                  "type": "string",
                  "description": "The new password of the user."
                },
                "provider": {
                  "type": "array",
                  "description": "The associated IDPs of the user.",
                  "items": {
                    "type": "string"
                  }
                },
                "upgradeToFederatedLogin": {
                  "type": "boolean",
                  "description": "Mark the user to upgrade to federated login."
                },
                "validSince": {
                  "type": "string",
                  "description": "Timestamp in seconds for valid login token.",
                  "format": "int64"
                }
              }
            }

+ Response 200

### Resource /uploadAccount [/uploadAccount]

#### identitytoolkit.relyingparty.uploadAccount [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to upload user account in batch.",
              "properties": {
                "hashAlgorithm": {
                  "type": "string",
                  "description": "The password hash algorithm."
                },
                "memoryCost": {
                  "type": "integer",
                  "description": "Memory cost for hash calculation. Used by scrypt similar algorithms.",
                  "format": "int32"
                },
                "rounds": {
                  "type": "integer",
                  "description": "Rounds for hash calculation. Used by scrypt and similar algorithms.",
                  "format": "int32"
                },
                "saltSeparator": {
                  "type": "string",
                  "description": "The salt separator.",
                  "format": "byte"
                },
                "signerKey": {
                  "type": "string",
                  "description": "The key for to hash the password.",
                  "format": "byte"
                },
                "users": {
                  "type": "array",
                  "description": "The account info to be stored.",
                  "items": {
                    "type": "object",
                    "description": "Template for an individual account info.",
                    "properties": {
                      "disabled": {
                        "type": "boolean",
                        "description": "Whether the user is disabled."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "The name of the user."
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the user."
                      },
                      "emailVerified": {
                        "type": "boolean",
                        "description": "Whether the email has been verified."
                      },
                      "localId": {
                        "type": "string",
                        "description": "The local ID of the user."
                      },
                      "passwordHash": {
                        "type": "string",
                        "description": "The user's hashed password.",
                        "format": "byte"
                      },
                      "passwordUpdatedAt": {
                        "type": "number",
                        "description": "The timestamp when the password was last updated.",
                        "format": "double"
                      },
                      "photoUrl": {
                        "type": "string",
                        "description": "The URL of the user profile photo."
                      },
                      "providerUserInfo": {
                        "type": "array",
                        "description": "The IDP of the user.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "displayName": {
                              "type": "string",
                              "description": "The user's display name at the IDP."
                            },
                            "federatedId": {
                              "type": "string",
                              "description": "User's identifier at IDP."
                            },
                            "photoUrl": {
                              "type": "string",
                              "description": "The user's photo url at the IDP."
                            },
                            "providerId": {
                              "type": "string",
                              "description": "The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
                            }
                          }
                        }
                      },
                      "salt": {
                        "type": "string",
                        "description": "The user's password salt.",
                        "format": "byte"
                      },
                      "validSince": {
                        "type": "string",
                        "description": "Timestamp in seconds for valid login token.",
                        "format": "int64"
                      },
                      "version": {
                        "type": "integer",
                        "description": "Version of the user's password.",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            }

+ Response 200

### Resource /verifyAssertion [/verifyAssertion]

#### identitytoolkit.relyingparty.verifyAssertion [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to verify the IDP assertion.",
              "properties": {
                "pendingIdToken": {
                  "type": "string",
                  "description": "The GITKit token for the non-trusted IDP pending to be confirmed by the user."
                },
                "postBody": {
                  "type": "string",
                  "description": "The post body if the request is a HTTP POST."
                },
                "requestUri": {
                  "type": "string",
                  "description": "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP."
                },
                "returnRefreshToken": {
                  "type": "boolean",
                  "description": "Whether to return refresh tokens."
                }
              }
            }

+ Response 200

### Resource /verifyPassword [/verifyPassword]

#### identitytoolkit.relyingparty.verifyPassword [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "Request to verify the password.",
              "properties": {
                "captchaChallenge": {
                  "type": "string",
                  "description": "The captcha challenge."
                },
                "captchaResponse": {
                  "type": "string",
                  "description": "Response to the captcha."
                },
                "email": {
                  "type": "string",
                  "description": "The email of the user."
                },
                "password": {
                  "type": "string",
                  "description": "The password inputed by the user."
                },
                "pendingIdToken": {
                  "type": "string",
                  "description": "The GITKit token for the non-trusted IDP, which is to be confirmed by the user."
                }
              }
            }

+ Response 200

