FORMAT: 1A

# Fitness

Google Fit API

### Resource /{userId}/dataSources [/fitness/v1/users/{userId}/dataSources{?dataTypeName}]

#### fitness.users.dataSources.create [POST]

+ Parameters

    + userId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source.\n\nThe data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type.\n\nEach data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
              "properties": {
                "application": {
                  "type": "object",
                  "description": "See: google3/java/com/google/android/apps/heart/platform/api/Application.java",
                  "properties": {
                    "detailsUrl": {
                      "type": "string",
                      "description": "An optional URI that can be used to link back to the application."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of this application. This is required for REST clients, but we do not enforce uniqueness of this name. It is provided as a matter of convenience for other developers who would like to identify which REST created an Application or Data Source."
                    },
                    "packageName": {
                      "type": "string",
                      "description": "Package name for this application. This is used as a unique identifier when created by Android applications, but cannot be specified by REST clients. REST clients will have their developer project number reflected into the Data Source data stream IDs, instead of the packageName."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of the application. You should update this field whenever the application changes in a way that affects the computation of the data."
                    }
                  }
                },
                "dataStreamId": {
                  "type": "string",
                  "description": "A unique identifier for the data stream produced by this data source. The identifier includes:\n\n \n- The physical device's manufacturer, model, and serial number (UID). \n- The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. \n- The data source's type. \n- The data source's stream name.  Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal.\n\nThe exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName \n\nThe exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName \n\nWhen any of the optional fields that comprise of the data stream ID are blank, they will be omitted from the data stream ID. The minnimum viable data stream ID would be: type:dataType.name:developer project number\n\nFinally, the developer project number is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form."
                },
                "dataStreamName": {
                  "type": "string",
                  "description": "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors."
                },
                "dataType": {
                  "type": "object",
                  "description": "See: google3/java/com/google/android/apps/heart/platform/api/DataType.java",
                  "properties": {
                    "field": {
                      "type": "array",
                      "description": "A field represents one dimension of a data type.",
                      "items": {
                        "type": "object",
                        "description": "In case of multi-dimensional data (such as an accelerometer with x, y, and z axes) each field represents one dimension. Each data type field has a unique name which identifies it. The field also defines the format of the data (int, float, etc.).\n\nThis message is only instantiated in code and not used for wire comms or stored in any way.",
                        "properties": {
                          "format": {
                            "type": "string",
                            "description": "The different supported formats for each field in a data type.",
                            "enum": [
                              "floatList",
                              "floatPoint",
                              "integer",
                              "integerList",
                              "map",
                              "string"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "description": "Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type."
                          },
                          "optional": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Each data type has a unique, namespaced, name. All data types in the com.google namespace are shared as part of the platform."
                    }
                  }
                },
                "device": {
                  "type": "object",
                  "description": "Representation of an integrated device (such as a phone or a wearable) that can hold sensors. Each sensor is exposed as a data source.\n\nThe main purpose of the device information contained in this class is to identify the hardware of a particular data source. This can be useful in different ways, including:  \n- Distinguishing two similar sensors on different devices (the step counter on two nexus 5 phones, for instance)\n- Display the source of data to the user (by using the device make / model)\n- Treat data differently depending on sensor type (accelerometers on a watch may give different patterns than those on a phone)\n- Build different analysis models for each device/version.",
                  "properties": {
                    "manufacturer": {
                      "type": "string",
                      "description": "Manufacturer of the product/hardware."
                    },
                    "model": {
                      "type": "string",
                      "description": "End-user visible model name for the device."
                    },
                    "type": {
                      "type": "string",
                      "description": "A constant representing the type of the device.",
                      "enum": [
                        "chestStrap",
                        "phone",
                        "scale",
                        "tablet",
                        "unknown",
                        "watch"
                      ]
                    },
                    "uid": {
                      "type": "string",
                      "description": "The serial number or other unique ID for the hardware. This field is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the uid field in clear and normal form."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version string for the device hardware/software."
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "An end-user visible name for this data source."
                },
                "type": {
                  "type": "string",
                  "description": "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                  "enum": [
                    "derived",
                    "raw"
                  ]
                }
              }
            }

+ Response 200

#### fitness.users.dataSources.list [GET]

+ Parameters

    + userId (required)
  
    + dataTypeName

+ Response 200

### Resource /{userId}/dataSources/{dataSourceId} [/{userId}/dataSources/{dataSourceId}]

#### fitness.users.dataSources.delete [DELETE]

+ Parameters

    + userId (required)
  
    + dataSourceId (required)

+ Response 200

#### fitness.users.dataSources.get [GET]

+ Parameters

    + userId (required)
  
    + dataSourceId (required)

+ Response 200

#### fitness.users.dataSources.patch [PATCH]

+ Parameters

    + userId (required)
  
    + dataSourceId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source.\n\nThe data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type.\n\nEach data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
              "properties": {
                "application": {
                  "type": "object",
                  "description": "See: google3/java/com/google/android/apps/heart/platform/api/Application.java",
                  "properties": {
                    "detailsUrl": {
                      "type": "string",
                      "description": "An optional URI that can be used to link back to the application."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of this application. This is required for REST clients, but we do not enforce uniqueness of this name. It is provided as a matter of convenience for other developers who would like to identify which REST created an Application or Data Source."
                    },
                    "packageName": {
                      "type": "string",
                      "description": "Package name for this application. This is used as a unique identifier when created by Android applications, but cannot be specified by REST clients. REST clients will have their developer project number reflected into the Data Source data stream IDs, instead of the packageName."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of the application. You should update this field whenever the application changes in a way that affects the computation of the data."
                    }
                  }
                },
                "dataStreamId": {
                  "type": "string",
                  "description": "A unique identifier for the data stream produced by this data source. The identifier includes:\n\n \n- The physical device's manufacturer, model, and serial number (UID). \n- The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. \n- The data source's type. \n- The data source's stream name.  Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal.\n\nThe exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName \n\nThe exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName \n\nWhen any of the optional fields that comprise of the data stream ID are blank, they will be omitted from the data stream ID. The minnimum viable data stream ID would be: type:dataType.name:developer project number\n\nFinally, the developer project number is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form."
                },
                "dataStreamName": {
                  "type": "string",
                  "description": "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors."
                },
                "dataType": {
                  "type": "object",
                  "description": "See: google3/java/com/google/android/apps/heart/platform/api/DataType.java",
                  "properties": {
                    "field": {
                      "type": "array",
                      "description": "A field represents one dimension of a data type.",
                      "items": {
                        "type": "object",
                        "description": "In case of multi-dimensional data (such as an accelerometer with x, y, and z axes) each field represents one dimension. Each data type field has a unique name which identifies it. The field also defines the format of the data (int, float, etc.).\n\nThis message is only instantiated in code and not used for wire comms or stored in any way.",
                        "properties": {
                          "format": {
                            "type": "string",
                            "description": "The different supported formats for each field in a data type.",
                            "enum": [
                              "floatList",
                              "floatPoint",
                              "integer",
                              "integerList",
                              "map",
                              "string"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "description": "Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type."
                          },
                          "optional": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Each data type has a unique, namespaced, name. All data types in the com.google namespace are shared as part of the platform."
                    }
                  }
                },
                "device": {
                  "type": "object",
                  "description": "Representation of an integrated device (such as a phone or a wearable) that can hold sensors. Each sensor is exposed as a data source.\n\nThe main purpose of the device information contained in this class is to identify the hardware of a particular data source. This can be useful in different ways, including:  \n- Distinguishing two similar sensors on different devices (the step counter on two nexus 5 phones, for instance)\n- Display the source of data to the user (by using the device make / model)\n- Treat data differently depending on sensor type (accelerometers on a watch may give different patterns than those on a phone)\n- Build different analysis models for each device/version.",
                  "properties": {
                    "manufacturer": {
                      "type": "string",
                      "description": "Manufacturer of the product/hardware."
                    },
                    "model": {
                      "type": "string",
                      "description": "End-user visible model name for the device."
                    },
                    "type": {
                      "type": "string",
                      "description": "A constant representing the type of the device.",
                      "enum": [
                        "chestStrap",
                        "phone",
                        "scale",
                        "tablet",
                        "unknown",
                        "watch"
                      ]
                    },
                    "uid": {
                      "type": "string",
                      "description": "The serial number or other unique ID for the hardware. This field is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the uid field in clear and normal form."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version string for the device hardware/software."
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "An end-user visible name for this data source."
                },
                "type": {
                  "type": "string",
                  "description": "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                  "enum": [
                    "derived",
                    "raw"
                  ]
                }
              }
            }

+ Response 200

#### fitness.users.dataSources.update [PUT]

+ Parameters

    + userId (required)
  
    + dataSourceId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source.\n\nThe data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type.\n\nEach data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
              "properties": {
                "application": {
                  "type": "object",
                  "description": "See: google3/java/com/google/android/apps/heart/platform/api/Application.java",
                  "properties": {
                    "detailsUrl": {
                      "type": "string",
                      "description": "An optional URI that can be used to link back to the application."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of this application. This is required for REST clients, but we do not enforce uniqueness of this name. It is provided as a matter of convenience for other developers who would like to identify which REST created an Application or Data Source."
                    },
                    "packageName": {
                      "type": "string",
                      "description": "Package name for this application. This is used as a unique identifier when created by Android applications, but cannot be specified by REST clients. REST clients will have their developer project number reflected into the Data Source data stream IDs, instead of the packageName."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of the application. You should update this field whenever the application changes in a way that affects the computation of the data."
                    }
                  }
                },
                "dataStreamId": {
                  "type": "string",
                  "description": "A unique identifier for the data stream produced by this data source. The identifier includes:\n\n \n- The physical device's manufacturer, model, and serial number (UID). \n- The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. \n- The data source's type. \n- The data source's stream name.  Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal.\n\nThe exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName \n\nThe exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName \n\nWhen any of the optional fields that comprise of the data stream ID are blank, they will be omitted from the data stream ID. The minnimum viable data stream ID would be: type:dataType.name:developer project number\n\nFinally, the developer project number is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form."
                },
                "dataStreamName": {
                  "type": "string",
                  "description": "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors."
                },
                "dataType": {
                  "type": "object",
                  "description": "See: google3/java/com/google/android/apps/heart/platform/api/DataType.java",
                  "properties": {
                    "field": {
                      "type": "array",
                      "description": "A field represents one dimension of a data type.",
                      "items": {
                        "type": "object",
                        "description": "In case of multi-dimensional data (such as an accelerometer with x, y, and z axes) each field represents one dimension. Each data type field has a unique name which identifies it. The field also defines the format of the data (int, float, etc.).\n\nThis message is only instantiated in code and not used for wire comms or stored in any way.",
                        "properties": {
                          "format": {
                            "type": "string",
                            "description": "The different supported formats for each field in a data type.",
                            "enum": [
                              "floatList",
                              "floatPoint",
                              "integer",
                              "integerList",
                              "map",
                              "string"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "description": "Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type."
                          },
                          "optional": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Each data type has a unique, namespaced, name. All data types in the com.google namespace are shared as part of the platform."
                    }
                  }
                },
                "device": {
                  "type": "object",
                  "description": "Representation of an integrated device (such as a phone or a wearable) that can hold sensors. Each sensor is exposed as a data source.\n\nThe main purpose of the device information contained in this class is to identify the hardware of a particular data source. This can be useful in different ways, including:  \n- Distinguishing two similar sensors on different devices (the step counter on two nexus 5 phones, for instance)\n- Display the source of data to the user (by using the device make / model)\n- Treat data differently depending on sensor type (accelerometers on a watch may give different patterns than those on a phone)\n- Build different analysis models for each device/version.",
                  "properties": {
                    "manufacturer": {
                      "type": "string",
                      "description": "Manufacturer of the product/hardware."
                    },
                    "model": {
                      "type": "string",
                      "description": "End-user visible model name for the device."
                    },
                    "type": {
                      "type": "string",
                      "description": "A constant representing the type of the device.",
                      "enum": [
                        "chestStrap",
                        "phone",
                        "scale",
                        "tablet",
                        "unknown",
                        "watch"
                      ]
                    },
                    "uid": {
                      "type": "string",
                      "description": "The serial number or other unique ID for the hardware. This field is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the uid field in clear and normal form."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version string for the device hardware/software."
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "An end-user visible name for this data source."
                },
                "type": {
                  "type": "string",
                  "description": "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                  "enum": [
                    "derived",
                    "raw"
                  ]
                }
              }
            }

+ Response 200

### Resource /{userId}/dataSources/{dataSourceId}/datasets/{datasetId} [/fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}{?currentTimeMillis}]

#### fitness.users.dataSources.datasets.delete [DELETE]

+ Parameters

    + userId (required)
  
    + dataSourceId (required)
  
    + datasetId (required)
  
    + currentTimeMillis
  
    + modifiedTimeMillis

+ Response 200

#### fitness.users.dataSources.datasets.get [GET]

+ Parameters

    + userId (required)
  
    + dataSourceId (required)
  
    + datasetId (required)
  
    + limit
  
    + pageToken

+ Response 200

#### fitness.users.dataSources.datasets.patch [PATCH]

+ Parameters

    + userId (required)
  
    + dataSourceId (required)
  
    + datasetId (required)
  
    + currentTimeMillis

+ Request

    + Schema

            {
              "type": "object",
              "description": "A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.",
              "properties": {
                "dataSourceId": {
                  "type": "string",
                  "description": "The data stream ID of the data source that created the points in this dataset."
                },
                "maxEndTimeNs": {
                  "type": "string",
                  "description": "The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.",
                  "format": "int64"
                },
                "minStartTimeNs": {
                  "type": "string",
                  "description": "The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.",
                  "format": "int64"
                },
                "nextPageToken": {
                  "type": "string",
                  "description": "This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset."
                },
                "point": {
                  "type": "array",
                  "description": "A partial list of data points contained in the dataset, ordered by largest endTimeNanos first. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.",
                  "items": {
                    "type": "object",
                    "description": "Represents a single data point, generated by a particular data source. A data point holds a value for each field, an end timestamp and an optional start time. The exact semantics of each of these attributes are specified in the documentation for the particular data type.\n\nA data point can represent an instantaneous measurement, reading or input observation, as well as averages or aggregates over a time interval. Check the data type documentation to determine which is the case for a particular data type.\n\nData points always contain one value for each field of the data type.",
                    "properties": {
                      "computationTimeMillis": {
                        "type": "string",
                        "description": "Used for version checking during transformation; that is, a datapoint can only replace another datapoint that has an older computation time stamp.",
                        "format": "int64"
                      },
                      "dataTypeName": {
                        "type": "string",
                        "description": "The data type defining the format of the values in this data point."
                      },
                      "endTimeNanos": {
                        "type": "string",
                        "description": "The end time of the interval represented by this data point, in nanoseconds since epoch.",
                        "format": "int64"
                      },
                      "modifiedTimeMillis": {
                        "type": "string",
                        "description": "Indicates the last time this data point was modified. Useful only in contexts where we are listing the data changes, rather than representing the current state of the data.",
                        "format": "int64"
                      },
                      "originDataSourceId": {
                        "type": "string",
                        "description": "If the data point is contained in a dataset for a derived data source, this field will be populated with the data source stream ID that created the data point originally."
                      },
                      "rawTimestampNanos": {
                        "type": "string",
                        "description": "The raw timestamp from the original SensorEvent.",
                        "format": "int64"
                      },
                      "startTimeNanos": {
                        "type": "string",
                        "description": "The start time of the interval represented by this data point, in nanoseconds since epoch.",
                        "format": "int64"
                      },
                      "value": {
                        "type": "array",
                        "description": "Values of each data type field for the data point. It is expected that each value corresponding to a data type field will occur in the same order that the field is listed with in the data type specified in a data source.\n\nOnly one of integer and floating point fields will be populated, depending on the format enum value within data source's type field.",
                        "items": {
                          "type": "object",
                          "description": "Holder object for the value of a single field in a data point.\n\nA field value has a particular format and is only ever set to one of an integer or a floating point value.",
                          "properties": {
                            "fpVal": {
                              "type": "number",
                              "description": "Floating point value. When this is set, intVal must not be set.",
                              "format": "double"
                            },
                            "intVal": {
                              "type": "integer",
                              "description": "Integer value. When this is set, fpVal must not be set.",
                              "format": "int32"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 200

### Resource /{userId}/dataset:aggregate [/{userId}/dataset:aggregate]

#### fitness.users.dataset.aggregate [POST]

+ Parameters

    + userId (required)

+ Request

    + Schema

            {
              "type": "object",
              "properties": {
                "aggregateBy": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dataSourceId": {
                        "type": "string"
                      },
                      "dataTypeName": {
                        "type": "string",
                        "description": "by dataype or by datasource"
                      },
                      "outputDataSourceId": {
                        "type": "string"
                      },
                      "outputDataTypeName": {
                        "type": "string"
                      }
                    }
                  }
                },
                "bucketByActivitySegment": {
                  "type": "object",
                  "properties": {
                    "activityDataSourceId": {
                      "type": "string",
                      "description": "default activity stream will be used if not specified"
                    },
                    "minDurationMillis": {
                      "type": "string",
                      "description": "Only activity segments of duration longer than this is used",
                      "format": "int64"
                    }
                  }
                },
                "bucketByActivityType": {
                  "type": "object",
                  "properties": {
                    "activityDataSourceId": {
                      "type": "string",
                      "description": "default activity stream will be used if not specified"
                    },
                    "minDurationMillis": {
                      "type": "string",
                      "description": "Only activity segments of duration longer than this is used",
                      "format": "int64"
                    }
                  }
                },
                "bucketBySession": {
                  "type": "object",
                  "properties": {
                    "minDurationMillis": {
                      "type": "string",
                      "description": "Only sessions of duration longer than this is used",
                      "format": "int64"
                    }
                  }
                },
                "bucketByTime": {
                  "type": "object",
                  "properties": {
                    "durationMillis": {
                      "type": "string",
                      "format": "int64"
                    }
                  }
                },
                "endTimeMillis": {
                  "type": "string",
                  "format": "int64"
                },
                "startTimeMillis": {
                  "type": "string",
                  "description": "required time range",
                  "format": "int64"
                }
              }
            }

+ Response 200

### Resource /{userId}/sessions/{sessionId} [/fitness/v1/users/{userId}/sessions/{sessionId}{?currentTimeMillis}]

#### fitness.users.sessions.delete [DELETE]

+ Parameters

    + userId (required)
  
    + sessionId (required)
  
    + currentTimeMillis

+ Response 200

#### fitness.users.sessions.update [PUT]

+ Parameters

    + userId (required)
  
    + sessionId (required)
  
    + currentTimeMillis

+ Request

    + Schema

            {
              "type": "object",
              "description": "Sessions contain metadata, such as a user-friendly name and time interval information.",
              "properties": {
                "activeTimeMillis": {
                  "type": "string",
                  "description": "Session active time. While start_time_millis and end_time_millis define the full session time, the active time can be shorter and specified by active_time_millis. If the inactive time during the session is known, it should also be inserted via a com.google.activity.segment data point with a STILL activity value",
                  "format": "int64"
                },
                "activityType": {
                  "type": "integer",
                  "description": "The type of activity this session represents.",
                  "format": "int32"
                },
                "application": {
                  "type": "object",
                  "description": "See: google3/java/com/google/android/apps/heart/platform/api/Application.java",
                  "properties": {
                    "detailsUrl": {
                      "type": "string",
                      "description": "An optional URI that can be used to link back to the application."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of this application. This is required for REST clients, but we do not enforce uniqueness of this name. It is provided as a matter of convenience for other developers who would like to identify which REST created an Application or Data Source."
                    },
                    "packageName": {
                      "type": "string",
                      "description": "Package name for this application. This is used as a unique identifier when created by Android applications, but cannot be specified by REST clients. REST clients will have their developer project number reflected into the Data Source data stream IDs, instead of the packageName."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of the application. You should update this field whenever the application changes in a way that affects the computation of the data."
                    }
                  }
                },
                "description": {
                  "type": "string",
                  "description": "A description for this session."
                },
                "endTimeMillis": {
                  "type": "string",
                  "description": "An end time, in milliseconds since epoch, inclusive.",
                  "format": "int64"
                },
                "id": {
                  "type": "string",
                  "description": "A client-generated identifier that is unique across all sessions owned by this particular user."
                },
                "modifiedTimeMillis": {
                  "type": "string",
                  "description": "A timestamp that indicates when the session was last modified.",
                  "format": "int64"
                },
                "name": {
                  "type": "string",
                  "description": "A human readable name of the session."
                },
                "startTimeMillis": {
                  "type": "string",
                  "description": "A start time, in milliseconds since epoch, inclusive.",
                  "format": "int64"
                }
              }
            }

+ Response 200

### Resource /{userId}/sessions [/fitness/v1/users/{userId}/sessions{?endTime,includeDeleted,pageToken,startTime}]

#### fitness.users.sessions.list [GET]

+ Parameters

    + userId (required)
  
    + endTime
  
    + includeDeleted
  
    + pageToken
  
    + startTime

+ Response 200

