FORMAT: 1A

# Genomics API

Provides access to Genomics data.

### Resource /annotationSets [/annotationSets]

#### genomics.annotationSets.create [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "An annotation set is a logical grouping of annotations that share consistent type information and provenance. Examples of annotation sets include 'all genes from refseq', and 'all variant annotations from ClinVar'.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "The ID of the containing dataset."
                },
                "id": {
                  "type": "string",
                  "description": "The generated unique ID for this annotation set."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The display name for this annotation set."
                },
                "referenceSetId": {
                  "type": "string",
                  "description": "The ID of the reference set that defines the coordinate space for this set's annotations."
                },
                "sourceUri": {
                  "type": "string",
                  "description": "The source URI describing the file from which this annotation set was generated, if any."
                },
                "type": {
                  "type": "string",
                  "description": "The type of annotations contained within this set.",
                  "enum": [
                    "GENE",
                    "GENERIC",
                    "TRANSCRIPT",
                    "VARIANT"
                  ]
                }
              }
            }

+ Response 200

### Resource /annotationSets/{annotationSetId} [/annotationSets/{annotationSetId}]

#### genomics.annotationSets.delete [DELETE]

+ Parameters

    + annotationSetId (required)

+ Response 200

#### genomics.annotationSets.get [GET]

+ Parameters

    + annotationSetId (required)

+ Response 200

#### genomics.annotationSets.patch [PATCH]

+ Parameters

    + annotationSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "An annotation set is a logical grouping of annotations that share consistent type information and provenance. Examples of annotation sets include 'all genes from refseq', and 'all variant annotations from ClinVar'.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "The ID of the containing dataset."
                },
                "id": {
                  "type": "string",
                  "description": "The generated unique ID for this annotation set."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The display name for this annotation set."
                },
                "referenceSetId": {
                  "type": "string",
                  "description": "The ID of the reference set that defines the coordinate space for this set's annotations."
                },
                "sourceUri": {
                  "type": "string",
                  "description": "The source URI describing the file from which this annotation set was generated, if any."
                },
                "type": {
                  "type": "string",
                  "description": "The type of annotations contained within this set.",
                  "enum": [
                    "GENE",
                    "GENERIC",
                    "TRANSCRIPT",
                    "VARIANT"
                  ]
                }
              }
            }

+ Response 200

#### genomics.annotationSets.update [PUT]

+ Parameters

    + annotationSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "An annotation set is a logical grouping of annotations that share consistent type information and provenance. Examples of annotation sets include 'all genes from refseq', and 'all variant annotations from ClinVar'.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "The ID of the containing dataset."
                },
                "id": {
                  "type": "string",
                  "description": "The generated unique ID for this annotation set."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The display name for this annotation set."
                },
                "referenceSetId": {
                  "type": "string",
                  "description": "The ID of the reference set that defines the coordinate space for this set's annotations."
                },
                "sourceUri": {
                  "type": "string",
                  "description": "The source URI describing the file from which this annotation set was generated, if any."
                },
                "type": {
                  "type": "string",
                  "description": "The type of annotations contained within this set.",
                  "enum": [
                    "GENE",
                    "GENERIC",
                    "TRANSCRIPT",
                    "VARIANT"
                  ]
                }
              }
            }

+ Response 200

### Resource /annotationSets/search [/annotationSets/search]

#### genomics.annotationSets.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "properties": {
                "datasetIds": {
                  "type": "array",
                  "description": "The dataset IDs to search within. Caller must have READ access to these datasets.",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "string",
                  "description": "Only return annotations sets for which a substring of the name matches this string (case insensitive)."
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Specifies number of results to return in a single page. If unspecified, it will default to 128. The maximum value is 1024.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                },
                "referenceSetId": {
                  "type": "string",
                  "description": "If specified, only annotation sets associated with the given reference set are returned."
                },
                "types": {
                  "type": "array",
                  "description": "If specified, only annotation sets that have any of these types are returned.",
                  "items": {
                    "type": "string",
                    "enum": [
                      "GENE",
                      "GENERIC",
                      "TRANSCRIPT",
                      "VARIANT"
                    ]
                  }
                }
              }
            }

+ Response 200

### Resource /annotations:batchCreate [/annotations:batchCreate]

#### genomics.annotations.batchCreate [POST]

+ Request

    + Schema

            {
              "type": "object",
              "properties": {
                "annotations": {
                  "type": "array",
                  "description": "The annotations to be created. At most 4096 can be specified in a single request.",
                  "items": {
                    "type": "object",
                    "description": "An annotation describes a region of reference genome. The value of an annotation may be one of several canonical types, supplemented by arbitrary info tags. A variant annotation is represented by one or more of these canonical types. An annotation is not inherently associated with a specific sample or individual (though a client could choose to use annotations in this way). Example canonical annotation types are 'Gene' and 'Variant'.",
                    "properties": {
                      "annotationSetId": {
                        "type": "string",
                        "description": "The ID of the containing annotation set."
                      },
                      "id": {
                        "type": "string",
                        "description": "The generated unique ID for this annotation."
                      },
                      "info": {
                        "type": "object",
                        "description": "A string which maps to an array of values.",
                        "additionalProperties": {
                          "type": "array",
                          "description": "A string which maps to an array of values.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "The display name of this annotation."
                      },
                      "position": {
                        "type": "object",
                        "description": "A 0-based half-open genomic coordinate range over a reference sequence, for representing the position of a genomic resource.",
                        "properties": {
                          "end": {
                            "type": "string",
                            "description": "The end position of the range on the reference, 0-based exclusive.",
                            "format": "int64"
                          },
                          "referenceId": {
                            "type": "string",
                            "description": "The ID of the Google Genomics reference associated with this range."
                          },
                          "referenceName": {
                            "type": "string",
                            "description": "The display name corresponding to the reference specified by referenceId, for example chr1, 1, or chrX."
                          },
                          "reverseStrand": {
                            "type": "boolean",
                            "description": "Whether this range refers to the reverse strand, as opposed to the forward strand. Note that regardless of this field, the start/end position of the range always refer to the forward strand."
                          },
                          "start": {
                            "type": "string",
                            "description": "The start position of the range on the reference, 0-based inclusive.",
                            "format": "int64"
                          }
                        }
                      },
                      "transcript": {
                        "type": "object",
                        "description": "A transcript represents the assertion that a particular region of the reference genome may be transcribed as RNA.",
                        "properties": {
                          "codingSequence": {
                            "type": "object",
                            "properties": {
                              "end": {
                                "type": "string",
                                "description": "The end of the coding sequence on this annotation's reference sequence, 0-based exclusive. Note that this position is relative to the reference start, and not the containing annotation start.",
                                "format": "int64"
                              },
                              "start": {
                                "type": "string",
                                "description": "The start of the coding sequence on this annotation's reference sequence, 0-based inclusive. Note that this position is relative to the reference start, and not the containing annotation start.",
                                "format": "int64"
                              }
                            }
                          },
                          "exons": {
                            "type": "array",
                            "description": "The exons that compose this transcript. This field should be unset for genomes where transcript splicing does not occur, for example prokaryotes.\n\n\nIntrons are regions of the transcript that are not included in the spliced RNA product. Though not explicitly modeled here, intron ranges can be deduced; all regions of this transcript that are not exons are introns.\n\n\nExonic sequences do not necessarily code for a translational product (amino acids). Only the regions of exons bounded by the codingSequence correspond to coding DNA sequence.\n\n\nExons are ordered by start position and may not overlap.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "end": {
                                  "type": "string",
                                  "description": "The end position of the exon on this annotation's reference sequence, 0-based exclusive. Note that this is relative to the reference start, and not the containing annotation start.",
                                  "format": "int64"
                                },
                                "frame": {
                                  "type": "object",
                                  "description": "Wrapper message for `int32`.\n\nThe JSON representation for `Int32Value` is JSON number.",
                                  "properties": {
                                    "value": {
                                      "type": "integer",
                                      "description": "The int32 value.",
                                      "format": "int32"
                                    }
                                  }
                                },
                                "start": {
                                  "type": "string",
                                  "description": "The start position of the exon on this annotation's reference sequence, 0-based inclusive. Note that this is relative to the reference start, and not the containing annotation start.",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          "geneId": {
                            "type": "string",
                            "description": "The annotation ID of the gene from which this transcript is transcribed."
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "description": "The data type for this annotation. Must match the containing annotation set's type.",
                        "enum": [
                          "GENE",
                          "GENERIC",
                          "TRANSCRIPT",
                          "VARIANT"
                        ]
                      },
                      "variant": {
                        "type": "object",
                        "description": "A Variant annotation.",
                        "properties": {
                          "alternateBases": {
                            "type": "string",
                            "description": "The alternate allele for this variant. If multiple alternate alleles exist at this location, create a separate variant for each one, as they may represent distinct conditions."
                          },
                          "clinicalSignificance": {
                            "type": "string",
                            "description": "Describes the clinical significance of a variant. It is adapted from the ClinVar controlled vocabulary for clinical significance described at: http://www.ncbi.nlm.nih.gov/clinvar/docs/clinsig/",
                            "enum": [
                              "ASSOCIATION",
                              "BENIGN",
                              "CLINICAL_SIGNIFICANCE_UNSPECIFIED",
                              "CONFERS_SENSITIVITY",
                              "DRUG_RESPONSE",
                              "HISTOCOMPATIBILITY",
                              "LIKELY_BENIGN",
                              "LIKELY_PATHOGENIC",
                              "MULTIPLE_REPORTED",
                              "OTHER",
                              "PATHOGENIC",
                              "PROTECTIVE",
                              "RISK_FACTOR",
                              "UNCERTAIN"
                            ]
                          },
                          "conditions": {
                            "type": "array",
                            "description": "The set of conditions associated with this variant. A condition describes the way a variant influences human health.",
                            "items": {
                              "type": "object",
                              "description": "",
                              "properties": {
                                "conceptId": {
                                  "type": "string",
                                  "description": "The MedGen concept id associated with this gene. Search for these IDs at http://www.ncbi.nlm.nih.gov/medgen/"
                                },
                                "externalIds": {
                                  "type": "array",
                                  "description": "The set of external IDs for this condition.",
                                  "items": {
                                    "type": "object",
                                    "description": "",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The id used by the source of this data."
                                      },
                                      "sourceName": {
                                        "type": "string",
                                        "description": "The name of the source of this data."
                                      }
                                    }
                                  }
                                },
                                "names": {
                                  "type": "array",
                                  "description": "A set of names for the condition.",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "omimId": {
                                  "type": "string",
                                  "description": "The OMIM id for this condition. Search for these IDs at http://omim.org/"
                                }
                              }
                            }
                          },
                          "effect": {
                            "type": "string",
                            "description": "Effect of the variant on the coding sequence.",
                            "enum": [
                              "EFFECT_UNSPECIFIED",
                              "FRAMESHIFT",
                              "FRAME_PRESERVING_INDEL",
                              "NONSYNONYMOUS_SNP",
                              "OTHER",
                              "SPLICE_SITE_DISRUPTION",
                              "STOP_GAIN",
                              "STOP_LOSS",
                              "SYNONYMOUS_SNP"
                            ]
                          },
                          "geneId": {
                            "type": "string",
                            "description": "Google annotation ID of the gene affected by this variant. This should be provided when the variant is created."
                          },
                          "transcriptIds": {
                            "type": "array",
                            "description": "Google annotation IDs of the transcripts affected by this variant. These should be provided when the variant is created.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "type": {
                            "type": "string",
                            "description": "Type has been adapted from ClinVar's list of variant types.",
                            "enum": [
                              "CNV",
                              "DELETION",
                              "INSERTION",
                              "OTHER",
                              "SNP",
                              "STRUCTURAL",
                              "SUBSTITUTION",
                              "TYPE_UNSPECIFIED"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 200

### Resource /annotations [/annotations]

#### genomics.annotations.create [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "An annotation describes a region of reference genome. The value of an annotation may be one of several canonical types, supplemented by arbitrary info tags. A variant annotation is represented by one or more of these canonical types. An annotation is not inherently associated with a specific sample or individual (though a client could choose to use annotations in this way). Example canonical annotation types are 'Gene' and 'Variant'.",
              "properties": {
                "annotationSetId": {
                  "type": "string",
                  "description": "The ID of the containing annotation set."
                },
                "id": {
                  "type": "string",
                  "description": "The generated unique ID for this annotation."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The display name of this annotation."
                },
                "position": {
                  "type": "object",
                  "description": "A 0-based half-open genomic coordinate range over a reference sequence, for representing the position of a genomic resource.",
                  "properties": {
                    "end": {
                      "type": "string",
                      "description": "The end position of the range on the reference, 0-based exclusive.",
                      "format": "int64"
                    },
                    "referenceId": {
                      "type": "string",
                      "description": "The ID of the Google Genomics reference associated with this range."
                    },
                    "referenceName": {
                      "type": "string",
                      "description": "The display name corresponding to the reference specified by referenceId, for example chr1, 1, or chrX."
                    },
                    "reverseStrand": {
                      "type": "boolean",
                      "description": "Whether this range refers to the reverse strand, as opposed to the forward strand. Note that regardless of this field, the start/end position of the range always refer to the forward strand."
                    },
                    "start": {
                      "type": "string",
                      "description": "The start position of the range on the reference, 0-based inclusive.",
                      "format": "int64"
                    }
                  }
                },
                "transcript": {
                  "type": "object",
                  "description": "A transcript represents the assertion that a particular region of the reference genome may be transcribed as RNA.",
                  "properties": {
                    "codingSequence": {
                      "type": "object",
                      "properties": {
                        "end": {
                          "type": "string",
                          "description": "The end of the coding sequence on this annotation's reference sequence, 0-based exclusive. Note that this position is relative to the reference start, and not the containing annotation start.",
                          "format": "int64"
                        },
                        "start": {
                          "type": "string",
                          "description": "The start of the coding sequence on this annotation's reference sequence, 0-based inclusive. Note that this position is relative to the reference start, and not the containing annotation start.",
                          "format": "int64"
                        }
                      }
                    },
                    "exons": {
                      "type": "array",
                      "description": "The exons that compose this transcript. This field should be unset for genomes where transcript splicing does not occur, for example prokaryotes.\n\n\nIntrons are regions of the transcript that are not included in the spliced RNA product. Though not explicitly modeled here, intron ranges can be deduced; all regions of this transcript that are not exons are introns.\n\n\nExonic sequences do not necessarily code for a translational product (amino acids). Only the regions of exons bounded by the codingSequence correspond to coding DNA sequence.\n\n\nExons are ordered by start position and may not overlap.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "end": {
                            "type": "string",
                            "description": "The end position of the exon on this annotation's reference sequence, 0-based exclusive. Note that this is relative to the reference start, and not the containing annotation start.",
                            "format": "int64"
                          },
                          "frame": {
                            "type": "object",
                            "description": "Wrapper message for `int32`.\n\nThe JSON representation for `Int32Value` is JSON number.",
                            "properties": {
                              "value": {
                                "type": "integer",
                                "description": "The int32 value.",
                                "format": "int32"
                              }
                            }
                          },
                          "start": {
                            "type": "string",
                            "description": "The start position of the exon on this annotation's reference sequence, 0-based inclusive. Note that this is relative to the reference start, and not the containing annotation start.",
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "geneId": {
                      "type": "string",
                      "description": "The annotation ID of the gene from which this transcript is transcribed."
                    }
                  }
                },
                "type": {
                  "type": "string",
                  "description": "The data type for this annotation. Must match the containing annotation set's type.",
                  "enum": [
                    "GENE",
                    "GENERIC",
                    "TRANSCRIPT",
                    "VARIANT"
                  ]
                },
                "variant": {
                  "type": "object",
                  "description": "A Variant annotation.",
                  "properties": {
                    "alternateBases": {
                      "type": "string",
                      "description": "The alternate allele for this variant. If multiple alternate alleles exist at this location, create a separate variant for each one, as they may represent distinct conditions."
                    },
                    "clinicalSignificance": {
                      "type": "string",
                      "description": "Describes the clinical significance of a variant. It is adapted from the ClinVar controlled vocabulary for clinical significance described at: http://www.ncbi.nlm.nih.gov/clinvar/docs/clinsig/",
                      "enum": [
                        "ASSOCIATION",
                        "BENIGN",
                        "CLINICAL_SIGNIFICANCE_UNSPECIFIED",
                        "CONFERS_SENSITIVITY",
                        "DRUG_RESPONSE",
                        "HISTOCOMPATIBILITY",
                        "LIKELY_BENIGN",
                        "LIKELY_PATHOGENIC",
                        "MULTIPLE_REPORTED",
                        "OTHER",
                        "PATHOGENIC",
                        "PROTECTIVE",
                        "RISK_FACTOR",
                        "UNCERTAIN"
                      ]
                    },
                    "conditions": {
                      "type": "array",
                      "description": "The set of conditions associated with this variant. A condition describes the way a variant influences human health.",
                      "items": {
                        "type": "object",
                        "description": "",
                        "properties": {
                          "conceptId": {
                            "type": "string",
                            "description": "The MedGen concept id associated with this gene. Search for these IDs at http://www.ncbi.nlm.nih.gov/medgen/"
                          },
                          "externalIds": {
                            "type": "array",
                            "description": "The set of external IDs for this condition.",
                            "items": {
                              "type": "object",
                              "description": "",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The id used by the source of this data."
                                },
                                "sourceName": {
                                  "type": "string",
                                  "description": "The name of the source of this data."
                                }
                              }
                            }
                          },
                          "names": {
                            "type": "array",
                            "description": "A set of names for the condition.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "omimId": {
                            "type": "string",
                            "description": "The OMIM id for this condition. Search for these IDs at http://omim.org/"
                          }
                        }
                      }
                    },
                    "effect": {
                      "type": "string",
                      "description": "Effect of the variant on the coding sequence.",
                      "enum": [
                        "EFFECT_UNSPECIFIED",
                        "FRAMESHIFT",
                        "FRAME_PRESERVING_INDEL",
                        "NONSYNONYMOUS_SNP",
                        "OTHER",
                        "SPLICE_SITE_DISRUPTION",
                        "STOP_GAIN",
                        "STOP_LOSS",
                        "SYNONYMOUS_SNP"
                      ]
                    },
                    "geneId": {
                      "type": "string",
                      "description": "Google annotation ID of the gene affected by this variant. This should be provided when the variant is created."
                    },
                    "transcriptIds": {
                      "type": "array",
                      "description": "Google annotation IDs of the transcripts affected by this variant. These should be provided when the variant is created.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Type has been adapted from ClinVar's list of variant types.",
                      "enum": [
                        "CNV",
                        "DELETION",
                        "INSERTION",
                        "OTHER",
                        "SNP",
                        "STRUCTURAL",
                        "SUBSTITUTION",
                        "TYPE_UNSPECIFIED"
                      ]
                    }
                  }
                }
              }
            }

+ Response 200

### Resource /annotations/{annotationId} [/annotations/{annotationId}]

#### genomics.annotations.delete [DELETE]

+ Parameters

    + annotationId (required)

+ Response 200

#### genomics.annotations.get [GET]

+ Parameters

    + annotationId (required)

+ Response 200

#### genomics.annotations.patch [PATCH]

+ Parameters

    + annotationId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "An annotation describes a region of reference genome. The value of an annotation may be one of several canonical types, supplemented by arbitrary info tags. A variant annotation is represented by one or more of these canonical types. An annotation is not inherently associated with a specific sample or individual (though a client could choose to use annotations in this way). Example canonical annotation types are 'Gene' and 'Variant'.",
              "properties": {
                "annotationSetId": {
                  "type": "string",
                  "description": "The ID of the containing annotation set."
                },
                "id": {
                  "type": "string",
                  "description": "The generated unique ID for this annotation."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The display name of this annotation."
                },
                "position": {
                  "type": "object",
                  "description": "A 0-based half-open genomic coordinate range over a reference sequence, for representing the position of a genomic resource.",
                  "properties": {
                    "end": {
                      "type": "string",
                      "description": "The end position of the range on the reference, 0-based exclusive.",
                      "format": "int64"
                    },
                    "referenceId": {
                      "type": "string",
                      "description": "The ID of the Google Genomics reference associated with this range."
                    },
                    "referenceName": {
                      "type": "string",
                      "description": "The display name corresponding to the reference specified by referenceId, for example chr1, 1, or chrX."
                    },
                    "reverseStrand": {
                      "type": "boolean",
                      "description": "Whether this range refers to the reverse strand, as opposed to the forward strand. Note that regardless of this field, the start/end position of the range always refer to the forward strand."
                    },
                    "start": {
                      "type": "string",
                      "description": "The start position of the range on the reference, 0-based inclusive.",
                      "format": "int64"
                    }
                  }
                },
                "transcript": {
                  "type": "object",
                  "description": "A transcript represents the assertion that a particular region of the reference genome may be transcribed as RNA.",
                  "properties": {
                    "codingSequence": {
                      "type": "object",
                      "properties": {
                        "end": {
                          "type": "string",
                          "description": "The end of the coding sequence on this annotation's reference sequence, 0-based exclusive. Note that this position is relative to the reference start, and not the containing annotation start.",
                          "format": "int64"
                        },
                        "start": {
                          "type": "string",
                          "description": "The start of the coding sequence on this annotation's reference sequence, 0-based inclusive. Note that this position is relative to the reference start, and not the containing annotation start.",
                          "format": "int64"
                        }
                      }
                    },
                    "exons": {
                      "type": "array",
                      "description": "The exons that compose this transcript. This field should be unset for genomes where transcript splicing does not occur, for example prokaryotes.\n\n\nIntrons are regions of the transcript that are not included in the spliced RNA product. Though not explicitly modeled here, intron ranges can be deduced; all regions of this transcript that are not exons are introns.\n\n\nExonic sequences do not necessarily code for a translational product (amino acids). Only the regions of exons bounded by the codingSequence correspond to coding DNA sequence.\n\n\nExons are ordered by start position and may not overlap.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "end": {
                            "type": "string",
                            "description": "The end position of the exon on this annotation's reference sequence, 0-based exclusive. Note that this is relative to the reference start, and not the containing annotation start.",
                            "format": "int64"
                          },
                          "frame": {
                            "type": "object",
                            "description": "Wrapper message for `int32`.\n\nThe JSON representation for `Int32Value` is JSON number.",
                            "properties": {
                              "value": {
                                "type": "integer",
                                "description": "The int32 value.",
                                "format": "int32"
                              }
                            }
                          },
                          "start": {
                            "type": "string",
                            "description": "The start position of the exon on this annotation's reference sequence, 0-based inclusive. Note that this is relative to the reference start, and not the containing annotation start.",
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "geneId": {
                      "type": "string",
                      "description": "The annotation ID of the gene from which this transcript is transcribed."
                    }
                  }
                },
                "type": {
                  "type": "string",
                  "description": "The data type for this annotation. Must match the containing annotation set's type.",
                  "enum": [
                    "GENE",
                    "GENERIC",
                    "TRANSCRIPT",
                    "VARIANT"
                  ]
                },
                "variant": {
                  "type": "object",
                  "description": "A Variant annotation.",
                  "properties": {
                    "alternateBases": {
                      "type": "string",
                      "description": "The alternate allele for this variant. If multiple alternate alleles exist at this location, create a separate variant for each one, as they may represent distinct conditions."
                    },
                    "clinicalSignificance": {
                      "type": "string",
                      "description": "Describes the clinical significance of a variant. It is adapted from the ClinVar controlled vocabulary for clinical significance described at: http://www.ncbi.nlm.nih.gov/clinvar/docs/clinsig/",
                      "enum": [
                        "ASSOCIATION",
                        "BENIGN",
                        "CLINICAL_SIGNIFICANCE_UNSPECIFIED",
                        "CONFERS_SENSITIVITY",
                        "DRUG_RESPONSE",
                        "HISTOCOMPATIBILITY",
                        "LIKELY_BENIGN",
                        "LIKELY_PATHOGENIC",
                        "MULTIPLE_REPORTED",
                        "OTHER",
                        "PATHOGENIC",
                        "PROTECTIVE",
                        "RISK_FACTOR",
                        "UNCERTAIN"
                      ]
                    },
                    "conditions": {
                      "type": "array",
                      "description": "The set of conditions associated with this variant. A condition describes the way a variant influences human health.",
                      "items": {
                        "type": "object",
                        "description": "",
                        "properties": {
                          "conceptId": {
                            "type": "string",
                            "description": "The MedGen concept id associated with this gene. Search for these IDs at http://www.ncbi.nlm.nih.gov/medgen/"
                          },
                          "externalIds": {
                            "type": "array",
                            "description": "The set of external IDs for this condition.",
                            "items": {
                              "type": "object",
                              "description": "",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The id used by the source of this data."
                                },
                                "sourceName": {
                                  "type": "string",
                                  "description": "The name of the source of this data."
                                }
                              }
                            }
                          },
                          "names": {
                            "type": "array",
                            "description": "A set of names for the condition.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "omimId": {
                            "type": "string",
                            "description": "The OMIM id for this condition. Search for these IDs at http://omim.org/"
                          }
                        }
                      }
                    },
                    "effect": {
                      "type": "string",
                      "description": "Effect of the variant on the coding sequence.",
                      "enum": [
                        "EFFECT_UNSPECIFIED",
                        "FRAMESHIFT",
                        "FRAME_PRESERVING_INDEL",
                        "NONSYNONYMOUS_SNP",
                        "OTHER",
                        "SPLICE_SITE_DISRUPTION",
                        "STOP_GAIN",
                        "STOP_LOSS",
                        "SYNONYMOUS_SNP"
                      ]
                    },
                    "geneId": {
                      "type": "string",
                      "description": "Google annotation ID of the gene affected by this variant. This should be provided when the variant is created."
                    },
                    "transcriptIds": {
                      "type": "array",
                      "description": "Google annotation IDs of the transcripts affected by this variant. These should be provided when the variant is created.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Type has been adapted from ClinVar's list of variant types.",
                      "enum": [
                        "CNV",
                        "DELETION",
                        "INSERTION",
                        "OTHER",
                        "SNP",
                        "STRUCTURAL",
                        "SUBSTITUTION",
                        "TYPE_UNSPECIFIED"
                      ]
                    }
                  }
                }
              }
            }

+ Response 200

#### genomics.annotations.update [PUT]

+ Parameters

    + annotationId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "An annotation describes a region of reference genome. The value of an annotation may be one of several canonical types, supplemented by arbitrary info tags. A variant annotation is represented by one or more of these canonical types. An annotation is not inherently associated with a specific sample or individual (though a client could choose to use annotations in this way). Example canonical annotation types are 'Gene' and 'Variant'.",
              "properties": {
                "annotationSetId": {
                  "type": "string",
                  "description": "The ID of the containing annotation set."
                },
                "id": {
                  "type": "string",
                  "description": "The generated unique ID for this annotation."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The display name of this annotation."
                },
                "position": {
                  "type": "object",
                  "description": "A 0-based half-open genomic coordinate range over a reference sequence, for representing the position of a genomic resource.",
                  "properties": {
                    "end": {
                      "type": "string",
                      "description": "The end position of the range on the reference, 0-based exclusive.",
                      "format": "int64"
                    },
                    "referenceId": {
                      "type": "string",
                      "description": "The ID of the Google Genomics reference associated with this range."
                    },
                    "referenceName": {
                      "type": "string",
                      "description": "The display name corresponding to the reference specified by referenceId, for example chr1, 1, or chrX."
                    },
                    "reverseStrand": {
                      "type": "boolean",
                      "description": "Whether this range refers to the reverse strand, as opposed to the forward strand. Note that regardless of this field, the start/end position of the range always refer to the forward strand."
                    },
                    "start": {
                      "type": "string",
                      "description": "The start position of the range on the reference, 0-based inclusive.",
                      "format": "int64"
                    }
                  }
                },
                "transcript": {
                  "type": "object",
                  "description": "A transcript represents the assertion that a particular region of the reference genome may be transcribed as RNA.",
                  "properties": {
                    "codingSequence": {
                      "type": "object",
                      "properties": {
                        "end": {
                          "type": "string",
                          "description": "The end of the coding sequence on this annotation's reference sequence, 0-based exclusive. Note that this position is relative to the reference start, and not the containing annotation start.",
                          "format": "int64"
                        },
                        "start": {
                          "type": "string",
                          "description": "The start of the coding sequence on this annotation's reference sequence, 0-based inclusive. Note that this position is relative to the reference start, and not the containing annotation start.",
                          "format": "int64"
                        }
                      }
                    },
                    "exons": {
                      "type": "array",
                      "description": "The exons that compose this transcript. This field should be unset for genomes where transcript splicing does not occur, for example prokaryotes.\n\n\nIntrons are regions of the transcript that are not included in the spliced RNA product. Though not explicitly modeled here, intron ranges can be deduced; all regions of this transcript that are not exons are introns.\n\n\nExonic sequences do not necessarily code for a translational product (amino acids). Only the regions of exons bounded by the codingSequence correspond to coding DNA sequence.\n\n\nExons are ordered by start position and may not overlap.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "end": {
                            "type": "string",
                            "description": "The end position of the exon on this annotation's reference sequence, 0-based exclusive. Note that this is relative to the reference start, and not the containing annotation start.",
                            "format": "int64"
                          },
                          "frame": {
                            "type": "object",
                            "description": "Wrapper message for `int32`.\n\nThe JSON representation for `Int32Value` is JSON number.",
                            "properties": {
                              "value": {
                                "type": "integer",
                                "description": "The int32 value.",
                                "format": "int32"
                              }
                            }
                          },
                          "start": {
                            "type": "string",
                            "description": "The start position of the exon on this annotation's reference sequence, 0-based inclusive. Note that this is relative to the reference start, and not the containing annotation start.",
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "geneId": {
                      "type": "string",
                      "description": "The annotation ID of the gene from which this transcript is transcribed."
                    }
                  }
                },
                "type": {
                  "type": "string",
                  "description": "The data type for this annotation. Must match the containing annotation set's type.",
                  "enum": [
                    "GENE",
                    "GENERIC",
                    "TRANSCRIPT",
                    "VARIANT"
                  ]
                },
                "variant": {
                  "type": "object",
                  "description": "A Variant annotation.",
                  "properties": {
                    "alternateBases": {
                      "type": "string",
                      "description": "The alternate allele for this variant. If multiple alternate alleles exist at this location, create a separate variant for each one, as they may represent distinct conditions."
                    },
                    "clinicalSignificance": {
                      "type": "string",
                      "description": "Describes the clinical significance of a variant. It is adapted from the ClinVar controlled vocabulary for clinical significance described at: http://www.ncbi.nlm.nih.gov/clinvar/docs/clinsig/",
                      "enum": [
                        "ASSOCIATION",
                        "BENIGN",
                        "CLINICAL_SIGNIFICANCE_UNSPECIFIED",
                        "CONFERS_SENSITIVITY",
                        "DRUG_RESPONSE",
                        "HISTOCOMPATIBILITY",
                        "LIKELY_BENIGN",
                        "LIKELY_PATHOGENIC",
                        "MULTIPLE_REPORTED",
                        "OTHER",
                        "PATHOGENIC",
                        "PROTECTIVE",
                        "RISK_FACTOR",
                        "UNCERTAIN"
                      ]
                    },
                    "conditions": {
                      "type": "array",
                      "description": "The set of conditions associated with this variant. A condition describes the way a variant influences human health.",
                      "items": {
                        "type": "object",
                        "description": "",
                        "properties": {
                          "conceptId": {
                            "type": "string",
                            "description": "The MedGen concept id associated with this gene. Search for these IDs at http://www.ncbi.nlm.nih.gov/medgen/"
                          },
                          "externalIds": {
                            "type": "array",
                            "description": "The set of external IDs for this condition.",
                            "items": {
                              "type": "object",
                              "description": "",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The id used by the source of this data."
                                },
                                "sourceName": {
                                  "type": "string",
                                  "description": "The name of the source of this data."
                                }
                              }
                            }
                          },
                          "names": {
                            "type": "array",
                            "description": "A set of names for the condition.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "omimId": {
                            "type": "string",
                            "description": "The OMIM id for this condition. Search for these IDs at http://omim.org/"
                          }
                        }
                      }
                    },
                    "effect": {
                      "type": "string",
                      "description": "Effect of the variant on the coding sequence.",
                      "enum": [
                        "EFFECT_UNSPECIFIED",
                        "FRAMESHIFT",
                        "FRAME_PRESERVING_INDEL",
                        "NONSYNONYMOUS_SNP",
                        "OTHER",
                        "SPLICE_SITE_DISRUPTION",
                        "STOP_GAIN",
                        "STOP_LOSS",
                        "SYNONYMOUS_SNP"
                      ]
                    },
                    "geneId": {
                      "type": "string",
                      "description": "Google annotation ID of the gene affected by this variant. This should be provided when the variant is created."
                    },
                    "transcriptIds": {
                      "type": "array",
                      "description": "Google annotation IDs of the transcripts affected by this variant. These should be provided when the variant is created.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Type has been adapted from ClinVar's list of variant types.",
                      "enum": [
                        "CNV",
                        "DELETION",
                        "INSERTION",
                        "OTHER",
                        "SNP",
                        "STRUCTURAL",
                        "SUBSTITUTION",
                        "TYPE_UNSPECIFIED"
                      ]
                    }
                  }
                }
              }
            }

+ Response 200

### Resource /annotations/search [/annotations/search]

#### genomics.annotations.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "properties": {
                "annotationSetIds": {
                  "type": "array",
                  "description": "The annotation sets to search within. The caller must have READ access to these annotation sets. Required. All queried annotation sets must have the same type.",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Specifies number of results to return in a single page. If unspecified, it will default to 256. The maximum value is 2048.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                },
                "range": {
                  "type": "object",
                  "description": "A 0-based half-open genomic coordinate range for search requests.",
                  "properties": {
                    "end": {
                      "type": "string",
                      "description": "The end position of the range on the reference, 0-based exclusive. If specified, referenceId or referenceName must also be specified. If unset or 0, defaults to the length of the reference.",
                      "format": "int64"
                    },
                    "referenceId": {
                      "type": "string",
                      "description": "The ID of the reference to query. At most one of referenceId and referenceName should be specified."
                    },
                    "referenceName": {
                      "type": "string",
                      "description": "The name of the reference to query, within the reference set associated with this query. At most one of referenceId and referenceName pshould be specified."
                    },
                    "start": {
                      "type": "string",
                      "description": "The start position of the range on the reference, 0-based inclusive. If specified, referenceId or referenceName must also be specified. Defaults to 0.",
                      "format": "int64"
                    }
                  }
                }
              }
            }

+ Response 200

### Resource /callsets [/callsets]

#### genomics.callsets.create [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "A call set is a collection of variant calls, typically for one sample. It belongs to a variant set.",
              "properties": {
                "created": {
                  "type": "string",
                  "description": "The date this call set was created in milliseconds from the epoch.",
                  "format": "int64"
                },
                "id": {
                  "type": "string",
                  "description": "The Google generated ID of the call set, immutable."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The call set name."
                },
                "sampleId": {
                  "type": "string",
                  "description": "The sample ID this call set corresponds to."
                },
                "variantSetIds": {
                  "type": "array",
                  "description": "The IDs of the variant sets this call set belongs to.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /callsets/{callSetId} [/callsets/{callSetId}]

#### genomics.callsets.delete [DELETE]

+ Parameters

    + callSetId (required)

+ Response 200

#### genomics.callsets.get [GET]

+ Parameters

    + callSetId (required)

+ Response 200

#### genomics.callsets.patch [PATCH]

+ Parameters

    + callSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A call set is a collection of variant calls, typically for one sample. It belongs to a variant set.",
              "properties": {
                "created": {
                  "type": "string",
                  "description": "The date this call set was created in milliseconds from the epoch.",
                  "format": "int64"
                },
                "id": {
                  "type": "string",
                  "description": "The Google generated ID of the call set, immutable."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The call set name."
                },
                "sampleId": {
                  "type": "string",
                  "description": "The sample ID this call set corresponds to."
                },
                "variantSetIds": {
                  "type": "array",
                  "description": "The IDs of the variant sets this call set belongs to.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

#### genomics.callsets.update [PUT]

+ Parameters

    + callSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A call set is a collection of variant calls, typically for one sample. It belongs to a variant set.",
              "properties": {
                "created": {
                  "type": "string",
                  "description": "The date this call set was created in milliseconds from the epoch.",
                  "format": "int64"
                },
                "id": {
                  "type": "string",
                  "description": "The Google generated ID of the call set, immutable."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The call set name."
                },
                "sampleId": {
                  "type": "string",
                  "description": "The sample ID this call set corresponds to."
                },
                "variantSetIds": {
                  "type": "array",
                  "description": "The IDs of the variant sets this call set belongs to.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /callsets/search [/callsets/search]

#### genomics.callsets.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The call set search request.",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Only return call sets for which a substring of the name matches this string."
                },
                "pageSize": {
                  "type": "integer",
                  "description": "The maximum number of call sets to return. If unspecified, defaults to 1000.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                },
                "variantSetIds": {
                  "type": "array",
                  "description": "Restrict the query to call sets within the given variant sets. At least one ID must be provided.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /datasets [/genomics/v1beta2/datasets{?pageSize,pageToken,projectNumber}]

#### genomics.datasets.create [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "A Dataset is a collection of genomic data.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The Google generated ID of the dataset, immutable."
                },
                "isPublic": {
                  "type": "boolean",
                  "description": "Flag indicating whether or not a dataset is publicly viewable. If a dataset is not public, it inherits viewing permissions from its project."
                },
                "name": {
                  "type": "string",
                  "description": "The dataset name."
                },
                "projectNumber": {
                  "type": "string",
                  "description": "The Google Developers Console project number that this dataset belongs to.",
                  "format": "int64"
                }
              }
            }

+ Response 200

#### genomics.datasets.list [GET]

+ Parameters

    + pageSize
  
    + pageToken
  
    + projectNumber

+ Response 200

### Resource /datasets/{datasetId} [/datasets/{datasetId}]

#### genomics.datasets.delete [DELETE]

+ Parameters

    + datasetId (required)

+ Response 200

#### genomics.datasets.get [GET]

+ Parameters

    + datasetId (required)

+ Response 200

#### genomics.datasets.patch [PATCH]

+ Parameters

    + datasetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A Dataset is a collection of genomic data.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The Google generated ID of the dataset, immutable."
                },
                "isPublic": {
                  "type": "boolean",
                  "description": "Flag indicating whether or not a dataset is publicly viewable. If a dataset is not public, it inherits viewing permissions from its project."
                },
                "name": {
                  "type": "string",
                  "description": "The dataset name."
                },
                "projectNumber": {
                  "type": "string",
                  "description": "The Google Developers Console project number that this dataset belongs to.",
                  "format": "int64"
                }
              }
            }

+ Response 200

#### genomics.datasets.update [PUT]

+ Parameters

    + datasetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A Dataset is a collection of genomic data.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The Google generated ID of the dataset, immutable."
                },
                "isPublic": {
                  "type": "boolean",
                  "description": "Flag indicating whether or not a dataset is publicly viewable. If a dataset is not public, it inherits viewing permissions from its project."
                },
                "name": {
                  "type": "string",
                  "description": "The dataset name."
                },
                "projectNumber": {
                  "type": "string",
                  "description": "The Google Developers Console project number that this dataset belongs to.",
                  "format": "int64"
                }
              }
            }

+ Response 200

### Resource /datasets/{datasetId}/undelete [/datasets/{datasetId}/undelete]

#### genomics.datasets.undelete [POST]

+ Parameters

    + datasetId (required)

+ Response 200

### Resource /experimental/jobs/create [/experimental/jobs/create]

#### genomics.experimental.jobs.create [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The job creation request.",
              "properties": {
                "align": {
                  "type": "boolean",
                  "description": "Specifies whether or not to run the alignment pipeline. Either align or callVariants must be set."
                },
                "callVariants": {
                  "type": "boolean",
                  "description": "Specifies whether or not to run the variant calling pipeline. Either align or callVariants must be set."
                },
                "gcsOutputPath": {
                  "type": "string",
                  "description": "Specifies where to copy the results of certain pipelines. This should be in the form of gs://bucket/path."
                },
                "pairedSourceUris": {
                  "type": "array",
                  "description": "A list of Google Cloud Storage URIs of paired end .fastq files to operate upon. If specified, this represents the second file of each paired .fastq file. The first file of each pair should be specified in sourceUris.",
                  "items": {
                    "type": "string"
                  }
                },
                "projectNumber": {
                  "type": "string",
                  "description": "Required. The Google Cloud Project ID with which to associate the request.",
                  "format": "int64"
                },
                "sourceUris": {
                  "type": "array",
                  "description": "A list of Google Cloud Storage URIs of data files to operate upon. These can be .bam, interleaved .fastq, or paired .fastq. If specifying paired .fastq files, the first of each pair of files should be listed here, and the second of each pair should be listed in pairedSourceUris.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /jobs/{jobId}/cancel [/jobs/{jobId}/cancel]

#### genomics.jobs.cancel [POST]

+ Parameters

    + jobId (required)

+ Response 200

### Resource /jobs/{jobId} [/jobs/{jobId}]

#### genomics.jobs.get [GET]

+ Parameters

    + jobId (required)

+ Response 200

### Resource /jobs/search [/jobs/search]

#### genomics.jobs.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The jobs search request.",
              "properties": {
                "createdAfter": {
                  "type": "string",
                  "description": "If specified, only jobs created on or after this date, given in milliseconds since Unix epoch, will be returned.",
                  "format": "int64"
                },
                "createdBefore": {
                  "type": "string",
                  "description": "If specified, only jobs created prior to this date, given in milliseconds since Unix epoch, will be returned.",
                  "format": "int64"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Specifies the number of results to return in a single page. Defaults to 128. The maximum value is 256.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token which is used to page through large result sets. To get the next page of results, set this parameter to the value of the nextPageToken from the previous response."
                },
                "projectNumber": {
                  "type": "string",
                  "description": "Required. Only return jobs which belong to this Google Developers Console project.",
                  "format": "int64"
                },
                "status": {
                  "type": "array",
                  "description": "Only return jobs which have a matching status.",
                  "items": {
                    "type": "string",
                    "enum": [
                      "CANCELED",
                      "FAILURE",
                      "NEW",
                      "PENDING",
                      "RUNNING",
                      "SUCCESS",
                      "UNKNOWN_STATUS"
                    ]
                  }
                }
              }
            }

+ Response 200

### Resource /readgroupsets/align [/readgroupsets/align]

#### genomics.readgroupsets.align [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The read group set align request.",
              "properties": {
                "bamSourceUris": {
                  "type": "array",
                  "description": "The BAM source files for alignment. Exactly one of readGroupSetId, bamSourceUris, interleavedFastqSource or pairedFastqSource must be provided. The caller must have READ permissions for these files.",
                  "items": {
                    "type": "string"
                  }
                },
                "datasetId": {
                  "type": "string",
                  "description": "Required. The ID of the dataset the newly aligned read group sets will belong to. The caller must have WRITE permissions to this dataset."
                },
                "interleavedFastqSource": {
                  "type": "object",
                  "description": "Describes an interleaved FASTQ file source for alignment.",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "libraryName": {
                          "type": "string",
                          "description": "Optionally specifies the library name for alignment from FASTQ."
                        },
                        "platformName": {
                          "type": "string",
                          "description": "Optionally specifies the platform name for alignment from FASTQ. For example: CAPILLARY, LS454, ILLUMINA, SOLID, HELICOS, IONTORRENT, PACBIO."
                        },
                        "platformUnit": {
                          "type": "string",
                          "description": "Optionally specifies the platform unit for alignment from FASTQ. For example: flowcell-barcode.lane for Illumina or slide for SOLID."
                        },
                        "readGroupName": {
                          "type": "string",
                          "description": "Optionally specifies the read group name for alignment from FASTQ."
                        },
                        "sampleName": {
                          "type": "string",
                          "description": "Optionally specifies the sample name for alignment from FASTQ."
                        }
                      }
                    },
                    "sourceUris": {
                      "type": "array",
                      "description": "A list of URIs pointing at interleaved FASTQ files in Google Cloud Storage which will be aligned. The caller must have READ permissions for these files.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "pairedFastqSource": {
                  "type": "object",
                  "description": "Describes a paired-end FASTQ file source for alignment.",
                  "properties": {
                    "firstSourceUris": {
                      "type": "array",
                      "description": "A list of URIs pointing at paired end FASTQ files in Google Cloud Storage which will be aligned. The first of each paired file should be specified here, in an order that matches the second of each paired file specified in secondSourceUris. For example: firstSourceUris: [file1_1.fq, file2_1.fq], secondSourceUris: [file1_2.fq, file2_2.fq]. The caller must have READ permissions for these files.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "libraryName": {
                          "type": "string",
                          "description": "Optionally specifies the library name for alignment from FASTQ."
                        },
                        "platformName": {
                          "type": "string",
                          "description": "Optionally specifies the platform name for alignment from FASTQ. For example: CAPILLARY, LS454, ILLUMINA, SOLID, HELICOS, IONTORRENT, PACBIO."
                        },
                        "platformUnit": {
                          "type": "string",
                          "description": "Optionally specifies the platform unit for alignment from FASTQ. For example: flowcell-barcode.lane for Illumina or slide for SOLID."
                        },
                        "readGroupName": {
                          "type": "string",
                          "description": "Optionally specifies the read group name for alignment from FASTQ."
                        },
                        "sampleName": {
                          "type": "string",
                          "description": "Optionally specifies the sample name for alignment from FASTQ."
                        }
                      }
                    },
                    "secondSourceUris": {
                      "type": "array",
                      "description": "A list of URIs pointing at paired end FASTQ files in Google Cloud Storage which will be aligned. The second of each paired file should be specified here, in an order that matches the first of each paired file specified in firstSourceUris. For example: firstSourceUris: [file1_1.fq, file2_1.fq], secondSourceUris: [file1_2.fq, file2_2.fq]. The caller must have READ permissions for these files.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "readGroupSetId": {
                  "type": "string",
                  "description": "The ID of the read group set which will be aligned. A new read group set will be generated to hold the aligned data, the originals will not be modified. The caller must have READ permissions for this read group set. Exactly one of readGroupSetId, bamSourceUris, interleavedFastqSource or pairedFastqSource must be provided."
                }
              }
            }

+ Response 200

### Resource /readgroupsets/call [/readgroupsets/call]

#### genomics.readgroupsets.call [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The read group set call request.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "Required. The ID of the dataset the called variants will belong to. The caller must have WRITE permissions to this dataset."
                },
                "readGroupSetId": {
                  "type": "string",
                  "description": "The IDs of the read group sets which will be called. The caller must have READ permissions for these read group sets. One of readGroupSetId or sourceUris must be provided."
                },
                "sourceUris": {
                  "type": "array",
                  "description": "A list of URIs pointing at BAM files in Google Cloud Storage which will be called. FASTQ files are not allowed. The caller must have READ permissions for these files. One of readGroupSetId or sourceUris must be provided.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /readgroupsets/{readGroupSetId} [/readgroupsets/{readGroupSetId}]

#### genomics.readgroupsets.delete [DELETE]

+ Parameters

    + readGroupSetId (required)

+ Response 200

#### genomics.readgroupsets.get [GET]

+ Parameters

    + readGroupSetId (required)

+ Response 200

#### genomics.readgroupsets.patch [PATCH]

+ Parameters

    + readGroupSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A read group set is a logical collection of read groups, which are collections of reads produced by a sequencer. A read group set typically models reads corresponding to one sample, sequenced one way, and aligned one way.  \n- A read group set belongs to one dataset.\n- A read group belongs to one read group set.\n- A read belongs to one read group.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "The dataset ID."
                },
                "filename": {
                  "type": "string",
                  "description": "The filename of the original source file for this read group set, if any."
                },
                "id": {
                  "type": "string",
                  "description": "The read group set ID."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The read group set name. By default this will be initialized to the sample name of the sequenced data contained in this set."
                },
                "readGroups": {
                  "type": "array",
                  "description": "The read groups in this set. There are typically 1-10 read groups in a read group set.",
                  "items": {
                    "type": "object",
                    "description": "A read group is all the data that's processed the same way by the sequencer.",
                    "properties": {
                      "datasetId": {
                        "type": "string",
                        "description": "The ID of the dataset this read group belongs to."
                      },
                      "description": {
                        "type": "string",
                        "description": "A free-form text description of this read group."
                      },
                      "experiment": {
                        "type": "object",
                        "properties": {
                          "instrumentModel": {
                            "type": "string",
                            "description": "The instrument model used as part of this experiment. This maps to sequencing technology in BAM."
                          },
                          "libraryId": {
                            "type": "string",
                            "description": "The library used as part of this experiment. Note: This is not an actual ID within this repository, but rather an identifier for a library which may be meaningful to some external system."
                          },
                          "platformUnit": {
                            "type": "string",
                            "description": "The platform unit used as part of this experiment e.g. flowcell-barcode.lane for Illumina or slide for SOLiD. Corresponds to the"
                          },
                          "sequencingCenter": {
                            "type": "string",
                            "description": "The sequencing center used as part of this experiment."
                          }
                        }
                      },
                      "id": {
                        "type": "string",
                        "description": "The generated unique read group ID. Note: This is different than the @RG ID field in the SAM spec. For that value, see the name field."
                      },
                      "info": {
                        "type": "object",
                        "description": "A string which maps to an array of values.",
                        "additionalProperties": {
                          "type": "array",
                          "description": "A string which maps to an array of values.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "The read group name. This corresponds to the @RG ID field in the SAM spec."
                      },
                      "predictedInsertSize": {
                        "type": "integer",
                        "description": "The predicted insert size of this read group. The insert size is the length the sequenced DNA fragment from end-to-end, not including the adapters.",
                        "format": "int32"
                      },
                      "programs": {
                        "type": "array",
                        "description": "The programs used to generate this read group. Programs are always identical for all read groups within a read group set. For this reason, only the first read group in a returned set will have this field populated.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "commandLine": {
                              "type": "string",
                              "description": "The command line used to run this program."
                            },
                            "id": {
                              "type": "string",
                              "description": "The user specified locally unique ID of the program. Used along with prevProgramId to define an ordering between programs."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the program."
                            },
                            "prevProgramId": {
                              "type": "string",
                              "description": "The ID of the program run before this one."
                            },
                            "version": {
                              "type": "string",
                              "description": "The version of the program run."
                            }
                          }
                        }
                      },
                      "referenceSetId": {
                        "type": "string",
                        "description": "The reference set the reads in this read group are aligned to. Required if there are any read alignments."
                      },
                      "sampleId": {
                        "type": "string",
                        "description": "The sample this read group's data was generated from. Note: This is not an actual ID within this repository, but rather an identifier for a sample which may be meaningful to some external system."
                      }
                    }
                  }
                },
                "referenceSetId": {
                  "type": "string",
                  "description": "The reference set the reads in this read group set are aligned to."
                }
              }
            }

+ Response 200

#### genomics.readgroupsets.update [PUT]

+ Parameters

    + readGroupSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A read group set is a logical collection of read groups, which are collections of reads produced by a sequencer. A read group set typically models reads corresponding to one sample, sequenced one way, and aligned one way.  \n- A read group set belongs to one dataset.\n- A read group belongs to one read group set.\n- A read belongs to one read group.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "The dataset ID."
                },
                "filename": {
                  "type": "string",
                  "description": "The filename of the original source file for this read group set, if any."
                },
                "id": {
                  "type": "string",
                  "description": "The read group set ID."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The read group set name. By default this will be initialized to the sample name of the sequenced data contained in this set."
                },
                "readGroups": {
                  "type": "array",
                  "description": "The read groups in this set. There are typically 1-10 read groups in a read group set.",
                  "items": {
                    "type": "object",
                    "description": "A read group is all the data that's processed the same way by the sequencer.",
                    "properties": {
                      "datasetId": {
                        "type": "string",
                        "description": "The ID of the dataset this read group belongs to."
                      },
                      "description": {
                        "type": "string",
                        "description": "A free-form text description of this read group."
                      },
                      "experiment": {
                        "type": "object",
                        "properties": {
                          "instrumentModel": {
                            "type": "string",
                            "description": "The instrument model used as part of this experiment. This maps to sequencing technology in BAM."
                          },
                          "libraryId": {
                            "type": "string",
                            "description": "The library used as part of this experiment. Note: This is not an actual ID within this repository, but rather an identifier for a library which may be meaningful to some external system."
                          },
                          "platformUnit": {
                            "type": "string",
                            "description": "The platform unit used as part of this experiment e.g. flowcell-barcode.lane for Illumina or slide for SOLiD. Corresponds to the"
                          },
                          "sequencingCenter": {
                            "type": "string",
                            "description": "The sequencing center used as part of this experiment."
                          }
                        }
                      },
                      "id": {
                        "type": "string",
                        "description": "The generated unique read group ID. Note: This is different than the @RG ID field in the SAM spec. For that value, see the name field."
                      },
                      "info": {
                        "type": "object",
                        "description": "A string which maps to an array of values.",
                        "additionalProperties": {
                          "type": "array",
                          "description": "A string which maps to an array of values.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "The read group name. This corresponds to the @RG ID field in the SAM spec."
                      },
                      "predictedInsertSize": {
                        "type": "integer",
                        "description": "The predicted insert size of this read group. The insert size is the length the sequenced DNA fragment from end-to-end, not including the adapters.",
                        "format": "int32"
                      },
                      "programs": {
                        "type": "array",
                        "description": "The programs used to generate this read group. Programs are always identical for all read groups within a read group set. For this reason, only the first read group in a returned set will have this field populated.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "commandLine": {
                              "type": "string",
                              "description": "The command line used to run this program."
                            },
                            "id": {
                              "type": "string",
                              "description": "The user specified locally unique ID of the program. Used along with prevProgramId to define an ordering between programs."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the program."
                            },
                            "prevProgramId": {
                              "type": "string",
                              "description": "The ID of the program run before this one."
                            },
                            "version": {
                              "type": "string",
                              "description": "The version of the program run."
                            }
                          }
                        }
                      },
                      "referenceSetId": {
                        "type": "string",
                        "description": "The reference set the reads in this read group are aligned to. Required if there are any read alignments."
                      },
                      "sampleId": {
                        "type": "string",
                        "description": "The sample this read group's data was generated from. Note: This is not an actual ID within this repository, but rather an identifier for a sample which may be meaningful to some external system."
                      }
                    }
                  }
                },
                "referenceSetId": {
                  "type": "string",
                  "description": "The reference set the reads in this read group set are aligned to."
                }
              }
            }

+ Response 200

### Resource /readgroupsets/export [/readgroupsets/export]

#### genomics.readgroupsets.export [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The read group set export request.",
              "properties": {
                "exportUri": {
                  "type": "string",
                  "description": "Required. A Google Cloud Storage URI for the exported BAM file. The currently authenticated user must have write access to the new file. An error will be returned if the URI already contains data."
                },
                "projectNumber": {
                  "type": "string",
                  "description": "Required. The Google Developers Console project number that owns this export.",
                  "format": "int64"
                },
                "readGroupSetIds": {
                  "type": "array",
                  "description": "Required. The IDs of the read group sets to export.",
                  "items": {
                    "type": "string"
                  }
                },
                "referenceNames": {
                  "type": "array",
                  "description": "The reference names to export. If this is not specified, all reference sequences, including unmapped reads, are exported. Use * to export only unmapped reads.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /readgroupsets/import [/readgroupsets/import]

#### genomics.readgroupsets.import [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The read group set import request.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "Required. The ID of the dataset these read group sets will belong to. The caller must have WRITE permissions to this dataset."
                },
                "partitionStrategy": {
                  "type": "string",
                  "description": "The partition strategy describes how read groups are partitioned into read group sets.",
                  "enum": [
                    "MERGE_ALL",
                    "PER_FILE_PER_SAMPLE"
                  ]
                },
                "referenceSetId": {
                  "type": "string",
                  "description": "The reference set to which the imported read group sets are aligned to, if any. The reference names of this reference set must be a superset of those found in the imported file headers. If no reference set id is provided, a best effort is made to associate with a matching reference set."
                },
                "sourceUris": {
                  "type": "array",
                  "description": "A list of URIs pointing at BAM files in Google Cloud Storage.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /readgroupsets/search [/readgroupsets/search]

#### genomics.readgroupsets.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The read group set search request.",
              "properties": {
                "datasetIds": {
                  "type": "array",
                  "description": "Restricts this query to read group sets within the given datasets. At least one ID must be provided.",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "string",
                  "description": "Only return read group sets for which a substring of the name matches this string."
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Specifies number of results to return in a single page. If unspecified, it will default to 256. The maximum value is 1024.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                }
              }
            }

+ Response 200

### Resource /readgroupsets/{readGroupSetId}/coveragebuckets [/genomics/v1beta2/readgroupsets/{readGroupSetId}/coveragebuckets{?pageSize,pageToken,range.end,range.referenceName,range.start,targetBucketWidth}]

#### genomics.readgroupsets.coveragebuckets.list [GET]

+ Parameters

    + readGroupSetId (required)
  
    + pageSize
  
    + pageToken
  
    + range.end
  
    + range.referenceName
  
    + range.start
  
    + targetBucketWidth

+ Response 200

### Resource /reads/search [/reads/search]

#### genomics.reads.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The read search request.",
              "properties": {
                "end": {
                  "type": "string",
                  "description": "The end position of the range on the reference, 0-based exclusive. If specified, referenceName must also be specified.",
                  "format": "int64"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Specifies number of results to return in a single page. If unspecified, it will default to 256. The maximum value is 2048.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                },
                "readGroupIds": {
                  "type": "array",
                  "description": "The IDs of the read groups within which to search for reads. All specified read groups must belong to the same read group sets. Must specify one of readGroupSetIds or readGroupIds.",
                  "items": {
                    "type": "string"
                  }
                },
                "readGroupSetIds": {
                  "type": "array",
                  "description": "The IDs of the read groups sets within which to search for reads. All specified read group sets must be aligned against a common set of reference sequences; this defines the genomic coordinates for the query. Must specify one of readGroupSetIds or readGroupIds.",
                  "items": {
                    "type": "string"
                  }
                },
                "referenceName": {
                  "type": "string",
                  "description": "The reference sequence name, for example chr1, 1, or chrX. If set to *, only unmapped reads are returned."
                },
                "start": {
                  "type": "string",
                  "description": "The start position of the range on the reference, 0-based inclusive. If specified, referenceName must also be specified.",
                  "format": "int64"
                }
              }
            }

+ Response 200

### Resource /references/{referenceId} [/references/{referenceId}]

#### genomics.references.get [GET]

+ Parameters

    + referenceId (required)

+ Response 200

### Resource /references/search [/references/search]

#### genomics.references.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "",
              "properties": {
                "accessions": {
                  "type": "array",
                  "description": "If present, return references for which the accession matches this string. Best to give a version number, for example GCF_000001405.26. If only the main accession number is given then all records with that main accession will be returned, whichever version. Note that different versions will have different sequences.",
                  "items": {
                    "type": "string"
                  }
                },
                "md5checksums": {
                  "type": "array",
                  "description": "If present, return references for which the md5checksum matches. See Reference.md5checksum for construction details.",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Specifies the maximum number of results to return in a single page.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                },
                "referenceSetId": {
                  "type": "string",
                  "description": "If present, return only references which belong to this reference set."
                }
              }
            }

+ Response 200

### Resource /references/{referenceId}/bases [/genomics/v1beta2/references/{referenceId}/bases{?end,pageSize,pageToken,start}]

#### genomics.references.bases.list [GET]

+ Parameters

    + referenceId (required)
  
    + end
  
    + pageSize
  
    + pageToken
  
    + start

+ Response 200

### Resource /referencesets/{referenceSetId} [/referencesets/{referenceSetId}]

#### genomics.referencesets.get [GET]

+ Parameters

    + referenceSetId (required)

+ Response 200

### Resource /referencesets/search [/referencesets/search]

#### genomics.referencesets.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "",
              "properties": {
                "accessions": {
                  "type": "array",
                  "description": "If present, return references for which the accession matches any of these strings. Best to give a version number, for example GCF_000001405.26. If only the main accession number is given then all records with that main accession will be returned, whichever version. Note that different versions will have different sequences.",
                  "items": {
                    "type": "string"
                  }
                },
                "assemblyId": {
                  "type": "string",
                  "description": "If present, return reference sets for which a substring of their assemblyId matches this string (case insensitive)."
                },
                "md5checksums": {
                  "type": "array",
                  "description": "If present, return references for which the md5checksum matches. See ReferenceSet.md5checksum for details.",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Specifies the maximum number of results to return in a single page.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                }
              }
            }

+ Response 200

### Resource /variants [/variants]

#### genomics.variants.create [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "A variant represents a change in DNA sequence relative to a reference sequence. For example, a variant could represent a SNP or an insertion. Variants belong to a variant set. Each of the calls on a variant represent a determination of genotype with respect to that variant. For example, a call might assign probability of 0.32 to the occurrence of a SNP named rs1234 in a sample named NA12345. A call belongs to a call set, which contains related calls typically from one sample.",
              "properties": {
                "alternateBases": {
                  "type": "array",
                  "description": "The bases that appear instead of the reference bases.",
                  "items": {
                    "type": "string"
                  }
                },
                "calls": {
                  "type": "array",
                  "description": "The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant.",
                  "items": {
                    "type": "object",
                    "description": "A call represents the determination of genotype with respect to a particular variant. It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named rs1234 in a call set with the name NA12345.",
                    "properties": {
                      "callSetId": {
                        "type": "string",
                        "description": "The ID of the call set this variant call belongs to."
                      },
                      "callSetName": {
                        "type": "string",
                        "description": "The name of the call set this variant call belongs to."
                      },
                      "genotype": {
                        "type": "array",
                        "description": "The genotype of this variant call. Each value represents either the value of the referenceBases field or a 1-based index into alternateBases. If a variant had a referenceBases value of T and an alternateBases value of [\"A\", \"C\"], and the genotype was [2, 1], that would mean the call represented the heterozygous value CA for this variant. If the genotype was instead [0, 1], the represented value would be TA. Ordering of the genotype values is important if the phaseset is present. If a genotype is not called (that is, a . is present in the GT string) -1 is returned.",
                        "items": {
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "genotypeLikelihood": {
                        "type": "array",
                        "description": "The genotype likelihoods for this variant call. Each array entry represents how likely a specific genotype is for this call. The value ordering is defined by the GL tag in the VCF spec. If Phred-scaled genotype likelihood scores (PL) are available and log10(P) genotype likelihood scores (GL) are not, PL scores are converted to GL scores. If both are available, PL scores are stored in info.",
                        "items": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "info": {
                        "type": "object",
                        "description": "A string which maps to an array of values.",
                        "additionalProperties": {
                          "type": "array",
                          "description": "A string which maps to an array of values.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "phaseset": {
                        "type": "string",
                        "description": "If this field is present, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls in the same reference sequence which have the same phaseset value. When importing data from VCF, if the genotype data was phased but no phase set was specified this field will be set to *."
                      }
                    }
                  }
                },
                "created": {
                  "type": "string",
                  "description": "The date this variant was created, in milliseconds from the epoch.",
                  "format": "int64"
                },
                "end": {
                  "type": "string",
                  "description": "The end position (0-based) of this variant. This corresponds to the first base after the last base in the reference allele. So, the length of the reference allele is (end - start). This is useful for variants that don't explicitly give alternate bases, for example large deletions.",
                  "format": "int64"
                },
                "filter": {
                  "type": "array",
                  "description": "A list of filters (normally quality filters) this variant has failed. PASS indicates this variant has passed all filters.",
                  "items": {
                    "type": "string"
                  }
                },
                "id": {
                  "type": "string",
                  "description": "The Google generated ID of the variant, immutable."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "names": {
                  "type": "array",
                  "description": "Names for the variant, for example a RefSNP ID.",
                  "items": {
                    "type": "string"
                  }
                },
                "quality": {
                  "type": "number",
                  "description": "A measure of how likely this variant is to be real. A higher value is better.",
                  "format": "double"
                },
                "referenceBases": {
                  "type": "string",
                  "description": "The reference bases for this variant. They start at the given position."
                },
                "referenceName": {
                  "type": "string",
                  "description": "The reference on which this variant occurs. (such as chr20 or X)"
                },
                "start": {
                  "type": "string",
                  "description": "The position at which this variant occurs (0-based). This corresponds to the first base of the string of reference bases.",
                  "format": "int64"
                },
                "variantSetId": {
                  "type": "string",
                  "description": "The ID of the variant set this variant belongs to."
                }
              }
            }

+ Response 200

### Resource /variants/{variantId} [/variants/{variantId}]

#### genomics.variants.delete [DELETE]

+ Parameters

    + variantId (required)

+ Response 200

#### genomics.variants.get [GET]

+ Parameters

    + variantId (required)

+ Response 200

#### genomics.variants.update [PUT]

+ Parameters

    + variantId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A variant represents a change in DNA sequence relative to a reference sequence. For example, a variant could represent a SNP or an insertion. Variants belong to a variant set. Each of the calls on a variant represent a determination of genotype with respect to that variant. For example, a call might assign probability of 0.32 to the occurrence of a SNP named rs1234 in a sample named NA12345. A call belongs to a call set, which contains related calls typically from one sample.",
              "properties": {
                "alternateBases": {
                  "type": "array",
                  "description": "The bases that appear instead of the reference bases.",
                  "items": {
                    "type": "string"
                  }
                },
                "calls": {
                  "type": "array",
                  "description": "The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant.",
                  "items": {
                    "type": "object",
                    "description": "A call represents the determination of genotype with respect to a particular variant. It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named rs1234 in a call set with the name NA12345.",
                    "properties": {
                      "callSetId": {
                        "type": "string",
                        "description": "The ID of the call set this variant call belongs to."
                      },
                      "callSetName": {
                        "type": "string",
                        "description": "The name of the call set this variant call belongs to."
                      },
                      "genotype": {
                        "type": "array",
                        "description": "The genotype of this variant call. Each value represents either the value of the referenceBases field or a 1-based index into alternateBases. If a variant had a referenceBases value of T and an alternateBases value of [\"A\", \"C\"], and the genotype was [2, 1], that would mean the call represented the heterozygous value CA for this variant. If the genotype was instead [0, 1], the represented value would be TA. Ordering of the genotype values is important if the phaseset is present. If a genotype is not called (that is, a . is present in the GT string) -1 is returned.",
                        "items": {
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "genotypeLikelihood": {
                        "type": "array",
                        "description": "The genotype likelihoods for this variant call. Each array entry represents how likely a specific genotype is for this call. The value ordering is defined by the GL tag in the VCF spec. If Phred-scaled genotype likelihood scores (PL) are available and log10(P) genotype likelihood scores (GL) are not, PL scores are converted to GL scores. If both are available, PL scores are stored in info.",
                        "items": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "info": {
                        "type": "object",
                        "description": "A string which maps to an array of values.",
                        "additionalProperties": {
                          "type": "array",
                          "description": "A string which maps to an array of values.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "phaseset": {
                        "type": "string",
                        "description": "If this field is present, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls in the same reference sequence which have the same phaseset value. When importing data from VCF, if the genotype data was phased but no phase set was specified this field will be set to *."
                      }
                    }
                  }
                },
                "created": {
                  "type": "string",
                  "description": "The date this variant was created, in milliseconds from the epoch.",
                  "format": "int64"
                },
                "end": {
                  "type": "string",
                  "description": "The end position (0-based) of this variant. This corresponds to the first base after the last base in the reference allele. So, the length of the reference allele is (end - start). This is useful for variants that don't explicitly give alternate bases, for example large deletions.",
                  "format": "int64"
                },
                "filter": {
                  "type": "array",
                  "description": "A list of filters (normally quality filters) this variant has failed. PASS indicates this variant has passed all filters.",
                  "items": {
                    "type": "string"
                  }
                },
                "id": {
                  "type": "string",
                  "description": "The Google generated ID of the variant, immutable."
                },
                "info": {
                  "type": "object",
                  "description": "A string which maps to an array of values.",
                  "additionalProperties": {
                    "type": "array",
                    "description": "A string which maps to an array of values.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "names": {
                  "type": "array",
                  "description": "Names for the variant, for example a RefSNP ID.",
                  "items": {
                    "type": "string"
                  }
                },
                "quality": {
                  "type": "number",
                  "description": "A measure of how likely this variant is to be real. A higher value is better.",
                  "format": "double"
                },
                "referenceBases": {
                  "type": "string",
                  "description": "The reference bases for this variant. They start at the given position."
                },
                "referenceName": {
                  "type": "string",
                  "description": "The reference on which this variant occurs. (such as chr20 or X)"
                },
                "start": {
                  "type": "string",
                  "description": "The position at which this variant occurs (0-based). This corresponds to the first base of the string of reference bases.",
                  "format": "int64"
                },
                "variantSetId": {
                  "type": "string",
                  "description": "The ID of the variant set this variant belongs to."
                }
              }
            }

+ Response 200

### Resource /variants/search [/variants/search]

#### genomics.variants.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The variant search request.",
              "properties": {
                "callSetIds": {
                  "type": "array",
                  "description": "Only return variant calls which belong to call sets with these ids. Leaving this blank returns all variant calls. If a variant has no calls belonging to any of these call sets, it won't be returned at all. Currently, variants with no calls from any call set will never be returned.",
                  "items": {
                    "type": "string"
                  }
                },
                "end": {
                  "type": "string",
                  "description": "The end of the window, 0-based exclusive. If unspecified or 0, defaults to the length of the reference.",
                  "format": "int64"
                },
                "maxCalls": {
                  "type": "integer",
                  "description": "The maximum number of calls to return. However, at least one variant will always be returned, even if it has more calls than this limit. If unspecified, defaults to 5000.",
                  "format": "int32"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "The maximum number of variants to return. If unspecified, defaults to 5000.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                },
                "referenceName": {
                  "type": "string",
                  "description": "Required. Only return variants in this reference sequence."
                },
                "start": {
                  "type": "string",
                  "description": "The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. If unspecified, defaults to 0.",
                  "format": "int64"
                },
                "variantName": {
                  "type": "string",
                  "description": "Only return variants which have exactly this name."
                },
                "variantSetIds": {
                  "type": "array",
                  "description": "At most one variant set ID must be provided. Only variants from this variant set will be returned. If omitted, a call set id must be included in the request.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /variantsets/{variantSetId} [/variantsets/{variantSetId}]

#### genomics.variantsets.delete [DELETE]

+ Parameters

    + variantSetId (required)

+ Response 200

#### genomics.variantsets.get [GET]

+ Parameters

    + variantSetId (required)

+ Response 200

#### genomics.variantsets.patch [PATCH]

+ Parameters

    + variantSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A variant set is a collection of call sets and variants. It contains summary statistics of those contents. A variant set belongs to a dataset.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "The dataset to which this variant set belongs. Immutable."
                },
                "id": {
                  "type": "string",
                  "description": "The Google-generated ID of the variant set. Immutable."
                },
                "metadata": {
                  "type": "array",
                  "description": "The metadata associated with this variant set.",
                  "items": {
                    "type": "object",
                    "description": "Metadata describes a single piece of variant call metadata. These data include a top level key and either a single value string (value) or a list of key-value pairs (info.) Value and info are mutually exclusive.",
                    "properties": {
                      "description": {
                        "type": "string",
                        "description": "A textual description of this metadata."
                      },
                      "id": {
                        "type": "string",
                        "description": "User-provided ID field, not enforced by this API. Two or more pieces of structured metadata with identical id and key fields are considered equivalent."
                      },
                      "info": {
                        "type": "object",
                        "description": "A string which maps to an array of values.",
                        "additionalProperties": {
                          "type": "array",
                          "description": "A string which maps to an array of values.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "key": {
                        "type": "string",
                        "description": "The top-level key."
                      },
                      "number": {
                        "type": "string",
                        "description": "The number of values that can be included in a field described by this metadata."
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of data. Possible types include: Integer, Float, Flag, Character, and String.",
                        "enum": [
                          "CHARACTER",
                          "FLAG",
                          "FLOAT",
                          "INTEGER",
                          "STRING",
                          "UNKNOWN_TYPE"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value field for simple metadata"
                      }
                    }
                  }
                },
                "referenceBounds": {
                  "type": "array",
                  "description": "A list of all references used by the variants in a variant set with associated coordinate upper bounds for each one.",
                  "items": {
                    "type": "object",
                    "description": "ReferenceBound records an upper bound for the starting coordinate of variants in a particular reference.",
                    "properties": {
                      "referenceName": {
                        "type": "string",
                        "description": "The reference the bound is associate with."
                      },
                      "upperBound": {
                        "type": "string",
                        "description": "An upper bound (inclusive) on the starting coordinate of any variant in the reference sequence.",
                        "format": "int64"
                      }
                    }
                  }
                }
              }
            }

+ Response 200

#### genomics.variantsets.update [PUT]

+ Parameters

    + variantSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A variant set is a collection of call sets and variants. It contains summary statistics of those contents. A variant set belongs to a dataset.",
              "properties": {
                "datasetId": {
                  "type": "string",
                  "description": "The dataset to which this variant set belongs. Immutable."
                },
                "id": {
                  "type": "string",
                  "description": "The Google-generated ID of the variant set. Immutable."
                },
                "metadata": {
                  "type": "array",
                  "description": "The metadata associated with this variant set.",
                  "items": {
                    "type": "object",
                    "description": "Metadata describes a single piece of variant call metadata. These data include a top level key and either a single value string (value) or a list of key-value pairs (info.) Value and info are mutually exclusive.",
                    "properties": {
                      "description": {
                        "type": "string",
                        "description": "A textual description of this metadata."
                      },
                      "id": {
                        "type": "string",
                        "description": "User-provided ID field, not enforced by this API. Two or more pieces of structured metadata with identical id and key fields are considered equivalent."
                      },
                      "info": {
                        "type": "object",
                        "description": "A string which maps to an array of values.",
                        "additionalProperties": {
                          "type": "array",
                          "description": "A string which maps to an array of values.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "key": {
                        "type": "string",
                        "description": "The top-level key."
                      },
                      "number": {
                        "type": "string",
                        "description": "The number of values that can be included in a field described by this metadata."
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of data. Possible types include: Integer, Float, Flag, Character, and String.",
                        "enum": [
                          "CHARACTER",
                          "FLAG",
                          "FLOAT",
                          "INTEGER",
                          "STRING",
                          "UNKNOWN_TYPE"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value field for simple metadata"
                      }
                    }
                  }
                },
                "referenceBounds": {
                  "type": "array",
                  "description": "A list of all references used by the variants in a variant set with associated coordinate upper bounds for each one.",
                  "items": {
                    "type": "object",
                    "description": "ReferenceBound records an upper bound for the starting coordinate of variants in a particular reference.",
                    "properties": {
                      "referenceName": {
                        "type": "string",
                        "description": "The reference the bound is associate with."
                      },
                      "upperBound": {
                        "type": "string",
                        "description": "An upper bound (inclusive) on the starting coordinate of any variant in the reference sequence.",
                        "format": "int64"
                      }
                    }
                  }
                }
              }
            }

+ Response 200

### Resource /variantsets/{variantSetId}/export [/variantsets/{variantSetId}/export]

#### genomics.variantsets.export [POST]

+ Parameters

    + variantSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "The variant data export request.",
              "properties": {
                "bigqueryDataset": {
                  "type": "string",
                  "description": "Required. The BigQuery dataset to export data to. This dataset must already exist. Note that this is distinct from the Genomics concept of \"dataset\"."
                },
                "bigqueryTable": {
                  "type": "string",
                  "description": "Required. The BigQuery table to export data to. If the table doesn't exist, it will be created. If it already exists, it will be overwritten."
                },
                "callSetIds": {
                  "type": "array",
                  "description": "If provided, only variant call information from the specified call sets will be exported. By default all variant calls are exported.",
                  "items": {
                    "type": "string"
                  }
                },
                "format": {
                  "type": "string",
                  "description": "The format for the exported data.",
                  "enum": [
                    "BIGQUERY"
                  ]
                },
                "projectNumber": {
                  "type": "string",
                  "description": "Required. The Google Cloud project number that owns the destination BigQuery dataset. The caller must have WRITE access to this project. This project will also own the resulting export job.",
                  "format": "int64"
                }
              }
            }

+ Response 200

### Resource /variantsets/{variantSetId}/importVariants [/variantsets/{variantSetId}/importVariants]

#### genomics.variantsets.importVariants [POST]

+ Parameters

    + variantSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "The variant data import request.",
              "properties": {
                "format": {
                  "type": "string",
                  "description": "The format of the variant data being imported. If unspecified, defaults to to \"VCF\".",
                  "enum": [
                    "COMPLETE_GENOMICS",
                    "VCF"
                  ]
                },
                "normalizeReferenceNames": {
                  "type": "boolean",
                  "description": "Convert reference names to the canonical representation. hg19 haploytypes (those reference names containing \"_hap\") are not modified in any way. All other reference names are modified according to the following rules: The reference name is capitalized. The \"chr\" prefix is dropped for all autosomes and sex chromsomes. For example \"chr17\" becomes \"17\" and \"chrX\" becomes \"X\". All mitochondrial chromosomes (\"chrM\", \"chrMT\", etc) become \"MT\"."
                },
                "sourceUris": {
                  "type": "array",
                  "description": "A list of URIs referencing variant files in Google Cloud Storage. URIs can include wildcards as described here. Note that recursive wildcards ('**') are not supported.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

### Resource /variantsets/{variantSetId}/mergeVariants [/variantsets/{variantSetId}/mergeVariants]

#### genomics.variantsets.mergeVariants [POST]

+ Parameters

    + variantSetId (required)

+ Request

    + Schema

            {
              "type": "object",
              "properties": {
                "variants": {
                  "type": "array",
                  "description": "The variants to be merged with existing variants.",
                  "items": {
                    "type": "object",
                    "description": "A variant represents a change in DNA sequence relative to a reference sequence. For example, a variant could represent a SNP or an insertion. Variants belong to a variant set. Each of the calls on a variant represent a determination of genotype with respect to that variant. For example, a call might assign probability of 0.32 to the occurrence of a SNP named rs1234 in a sample named NA12345. A call belongs to a call set, which contains related calls typically from one sample.",
                    "properties": {
                      "alternateBases": {
                        "type": "array",
                        "description": "The bases that appear instead of the reference bases.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "calls": {
                        "type": "array",
                        "description": "The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant.",
                        "items": {
                          "type": "object",
                          "description": "A call represents the determination of genotype with respect to a particular variant. It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named rs1234 in a call set with the name NA12345.",
                          "properties": {
                            "callSetId": {
                              "type": "string",
                              "description": "The ID of the call set this variant call belongs to."
                            },
                            "callSetName": {
                              "type": "string",
                              "description": "The name of the call set this variant call belongs to."
                            },
                            "genotype": {
                              "type": "array",
                              "description": "The genotype of this variant call. Each value represents either the value of the referenceBases field or a 1-based index into alternateBases. If a variant had a referenceBases value of T and an alternateBases value of [\"A\", \"C\"], and the genotype was [2, 1], that would mean the call represented the heterozygous value CA for this variant. If the genotype was instead [0, 1], the represented value would be TA. Ordering of the genotype values is important if the phaseset is present. If a genotype is not called (that is, a . is present in the GT string) -1 is returned.",
                              "items": {
                                "type": "integer",
                                "format": "int32"
                              }
                            },
                            "genotypeLikelihood": {
                              "type": "array",
                              "description": "The genotype likelihoods for this variant call. Each array entry represents how likely a specific genotype is for this call. The value ordering is defined by the GL tag in the VCF spec. If Phred-scaled genotype likelihood scores (PL) are available and log10(P) genotype likelihood scores (GL) are not, PL scores are converted to GL scores. If both are available, PL scores are stored in info.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            },
                            "info": {
                              "type": "object",
                              "description": "A string which maps to an array of values.",
                              "additionalProperties": {
                                "type": "array",
                                "description": "A string which maps to an array of values.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "phaseset": {
                              "type": "string",
                              "description": "If this field is present, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls in the same reference sequence which have the same phaseset value. When importing data from VCF, if the genotype data was phased but no phase set was specified this field will be set to *."
                            }
                          }
                        }
                      },
                      "created": {
                        "type": "string",
                        "description": "The date this variant was created, in milliseconds from the epoch.",
                        "format": "int64"
                      },
                      "end": {
                        "type": "string",
                        "description": "The end position (0-based) of this variant. This corresponds to the first base after the last base in the reference allele. So, the length of the reference allele is (end - start). This is useful for variants that don't explicitly give alternate bases, for example large deletions.",
                        "format": "int64"
                      },
                      "filter": {
                        "type": "array",
                        "description": "A list of filters (normally quality filters) this variant has failed. PASS indicates this variant has passed all filters.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "id": {
                        "type": "string",
                        "description": "The Google generated ID of the variant, immutable."
                      },
                      "info": {
                        "type": "object",
                        "description": "A string which maps to an array of values.",
                        "additionalProperties": {
                          "type": "array",
                          "description": "A string which maps to an array of values.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "names": {
                        "type": "array",
                        "description": "Names for the variant, for example a RefSNP ID.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "quality": {
                        "type": "number",
                        "description": "A measure of how likely this variant is to be real. A higher value is better.",
                        "format": "double"
                      },
                      "referenceBases": {
                        "type": "string",
                        "description": "The reference bases for this variant. They start at the given position."
                      },
                      "referenceName": {
                        "type": "string",
                        "description": "The reference on which this variant occurs. (such as chr20 or X)"
                      },
                      "start": {
                        "type": "string",
                        "description": "The position at which this variant occurs (0-based). This corresponds to the first base of the string of reference bases.",
                        "format": "int64"
                      },
                      "variantSetId": {
                        "type": "string",
                        "description": "The ID of the variant set this variant belongs to."
                      }
                    }
                  }
                }
              }
            }

+ Response 200

### Resource /variantsets/search [/variantsets/search]

#### genomics.variantsets.search [POST]

+ Request

    + Schema

            {
              "type": "object",
              "description": "The search variant sets request.",
              "properties": {
                "datasetIds": {
                  "type": "array",
                  "description": "Exactly one dataset ID must be provided here. Only variant sets which belong to this dataset will be returned.",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer",
                  "description": "The maximum number of variant sets to return in a request.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response."
                }
              }
            }

+ Response 200

