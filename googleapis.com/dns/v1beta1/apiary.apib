FORMAT: 1A

# Google Cloud DNS API

The Google Cloud DNS API provides services for configuring and serving authoritative DNS records.

### Resource /{project}/managedZones/{managedZone}/changes [/dns/v1beta1/projects/{project}/managedZones/{managedZone}/changes{?maxResults,pageToken,sortBy,sortOrder}]

#### dns.changes.create [POST]

+ Parameters

    + project (required)
  
    + managedZone (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "An atomic update to a collection of ResourceRecordSets.",
              "properties": {
                "additions": {
                  "type": "array",
                  "description": "Which ResourceRecordSets to add?",
                  "items": {
                    "type": "object",
                    "description": "A unit of data that will be returned by the DNS servers.",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "description": "Identifies what kind of resource this is. Value: the fixed string \"dns#resourceRecordSet\".",
                        "default": "dns#resourceRecordSet"
                      },
                      "name": {
                        "type": "string",
                        "description": "For example, www.example.com."
                      },
                      "rrdatas": {
                        "type": "array",
                        "description": "As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).",
                        "items": {
                          "type": "string"
                        }
                      },
                      "ttl": {
                        "type": "integer",
                        "description": "Number of seconds that this ResourceRecordSet can be cached by resolvers.",
                        "format": "int32"
                      },
                      "type": {
                        "type": "string",
                        "description": "The identifier of a supported record type, for example, A, AAAA, MX, TXT, and so on."
                      }
                    }
                  }
                },
                "deletions": {
                  "type": "array",
                  "description": "Which ResourceRecordSets to remove? Must match existing data exactly.",
                  "items": {
                    "type": "object",
                    "description": "A unit of data that will be returned by the DNS servers.",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "description": "Identifies what kind of resource this is. Value: the fixed string \"dns#resourceRecordSet\".",
                        "default": "dns#resourceRecordSet"
                      },
                      "name": {
                        "type": "string",
                        "description": "For example, www.example.com."
                      },
                      "rrdatas": {
                        "type": "array",
                        "description": "As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).",
                        "items": {
                          "type": "string"
                        }
                      },
                      "ttl": {
                        "type": "integer",
                        "description": "Number of seconds that this ResourceRecordSet can be cached by resolvers.",
                        "format": "int32"
                      },
                      "type": {
                        "type": "string",
                        "description": "The identifier of a supported record type, for example, A, AAAA, MX, TXT, and so on."
                      }
                    }
                  }
                },
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the resource; defined by the server (output only)."
                },
                "kind": {
                  "type": "string",
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"dns#change\".",
                  "default": "dns#change"
                },
                "startTime": {
                  "type": "string",
                  "description": "The time that this operation was started by the server. This is in RFC3339 text format."
                },
                "status": {
                  "type": "string",
                  "description": "Status of the operation (output only)."
                }
              }
            }

+ Response 200

#### dns.changes.list [GET]

+ Parameters

    + project (required)
  
    + managedZone (required)
  
    + maxResults
  
    + pageToken
  
    + sortBy
  
    + sortOrder

+ Response 200

### Resource /{project}/managedZones/{managedZone}/changes/{changeId} [/{project}/managedZones/{managedZone}/changes/{changeId}]

#### dns.changes.get [GET]

+ Parameters

    + project (required)
  
    + managedZone (required)
  
    + changeId (required)

+ Response 200

### Resource /{project}/managedZones [/dns/v1beta1/projects/{project}/managedZones{?maxResults,pageToken}]

#### dns.managedZones.create [POST]

+ Parameters

    + project (required)

+ Request

    + Schema

            {
              "type": "object",
              "description": "A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.",
              "properties": {
                "creationTime": {
                  "type": "string",
                  "description": "The time that this resource was created on the server. This is in RFC3339 text format. Output only."
                },
                "description": {
                  "type": "string",
                  "description": "A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function."
                },
                "dnsName": {
                  "type": "string",
                  "description": "The DNS name of this managed zone, for instance \"example.com.\"."
                },
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the resource; defined by the server (output only)",
                  "format": "uint64"
                },
                "kind": {
                  "type": "string",
                  "description": "Identifies what kind of resource this is. Value: the fixed string \"dns#managedZone\".",
                  "default": "dns#managedZone"
                },
                "name": {
                  "type": "string",
                  "description": "User assigned name for this resource. Must be unique within the project. The name must be 1-32 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes."
                },
                "nameServerSet": {
                  "type": "string",
                  "description": "Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users will leave this field unset."
                },
                "nameServers": {
                  "type": "array",
                  "description": "Delegate your managed_zone to these virtual name servers; defined by the server (output only)",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }

+ Response 200

#### dns.managedZones.list [GET]

+ Parameters

    + project (required)
  
    + maxResults
  
    + pageToken

+ Response 200

### Resource /{project}/managedZones/{managedZone} [/{project}/managedZones/{managedZone}]

#### dns.managedZones.delete [DELETE]

+ Parameters

    + project (required)
  
    + managedZone (required)

+ Response 200

#### dns.managedZones.get [GET]

+ Parameters

    + project (required)
  
    + managedZone (required)

+ Response 200

### Resource /{project} [/{project}]

#### dns.projects.get [GET]

+ Parameters

    + project (required)

+ Response 200

### Resource /{project}/managedZones/{managedZone}/rrsets [/dns/v1beta1/projects/{project}/managedZones/{managedZone}/rrsets{?maxResults,name,pageToken,type}]

#### dns.resourceRecordSets.list [GET]

+ Parameters

    + project (required)
  
    + managedZone (required)
  
    + maxResults
  
    + name
  
    + pageToken
  
    + type

+ Response 200

